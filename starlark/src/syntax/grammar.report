Lalrpop Report File
========================================

Summary
----------------------------------------

Constructed 318 states

State Table
----------------------------------------

State 0 {

    "\n"+                 -> . "\n"+ "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "\n"+                 -> . "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Stmt> "\n"*)+       -> . (<Stmt> "\n"*)+ Stmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Stmt> "\n"*)+       -> . (<Stmt> "\n"*)+ Stmt "\n"+
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Stmt> "\n"*)+       -> . Stmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Stmt> "\n"*)+       -> . Stmt "\n"+
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Test> ",")+         -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Test> ",")+         -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest               -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest               -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignStmt            -> . AssignStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignStmt_           -> . TestList Type AssignOp TestList
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr            -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr            -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr             -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr             -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr            -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr            -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DefStmt               -> . DefStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DefStmt_              -> . "def" "IDENTIFIER" "(" COMMA<ParameterTyped> ")" ReturnType ":" Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp              -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_             -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ExprStmt              -> . ExprStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ExprStmt_             -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ForStmt               -> . ForStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ForStmt_              -> . "for" ExprList "in" Test ":" Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    IfStmt                -> . IfStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    IfStmt_               -> . "if" IfBody_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . (<Test> ",")+ Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef               -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp              -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_             -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmt              -> . LoadStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner         -> . "load" "(" "STRING" ("," <LoadStmtSyms>)+ ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner         -> . "load" "(" "STRING" ("," <LoadStmtSyms>)+ "," ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmt_             -> . LoadStmtInner
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest               -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest               -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest                -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest                -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt (";" <SmallStmt>)+ "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt (";" <SmallStmt>)+ ";" "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt ";" "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . AssignStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . ExprStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . LoadStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "break"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "continue"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "pass"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "return"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "return" TestList
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Starlark              -> .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Starlark              -> . "\n"+
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Starlark              -> . "\n"+ (<Stmt> "\n"*)+
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Starlark              -> . (<Stmt> "\n"*)+
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Stmt                  -> . DefStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Stmt                  -> . ForStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Stmt                  -> . IfStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Stmt                  -> . SimpleStmt<SmallStmt>
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    TestList              -> . L<Test>
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    __Starlark            -> . Starlark
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Starlark ->
        lookahead EOF

    "\n"                  shift and goto 135
    "("                   shift and goto 7
    "+"                   shift and goto 8
    "-"                   shift and goto 9
    "FLOAT"               shift and goto 136
    "IDENTIFIER"          shift and goto 137
    "INTEGER"             shift and goto 138
    "STRING"              shift and goto 139
    "["                   shift and goto 10
    "break"               shift and goto 140
    "continue"            shift and goto 141
    "def"                 shift and goto 142
    "for"                 shift and goto 11
    "if"                  shift and goto 12
    "lambda"              shift and goto 13
    "load"                shift and goto 143
    "not"                 shift and goto 14
    "pass"                shift and goto 144
    "return"              shift and goto 15
    "{"                   shift and goto 16
    "~"                   shift and goto 17

    "\n"+                 goto 1
    (<Stmt> "\n"*)+       goto 2
    (<Test> ",")+         goto 3
    AndTest               goto 100
    ArithExpr             goto 101
    AssignStmt            goto 102
    AssignStmt_           goto 103
    BitAndExpr            goto 104
    BitOrExpr             goto 105
    BitXorExpr            goto 106
    CompTest              goto 107
    DefStmt               goto 108
    DefStmt_              goto 109
    DictComp              goto 110
    DictComp_             goto 111
    ExprStmt              goto 112
    ExprStmt_             goto 113
    FactorExpr            goto 114
    ForStmt               goto 115
    ForStmt_              goto 116
    IfStmt                goto 117
    IfStmt_               goto 118
    L<Test>               goto 119
    LambDef               goto 120
    ListComp              goto 121
    ListComp_             goto 122
    LoadStmt              goto 123
    LoadStmtInner         goto 124
    LoadStmt_             goto 125
    NotTest               goto 126
    Operand               goto 127
    OrTest                goto 128
    PrimaryExpr           goto 129
    ProductExpr           goto 130
    ShiftExpr             goto 131
    SimpleStmt<SmallStmt> goto 132
    SmallStmt             goto 4
    Starlark              goto 133
    Stmt                  goto 5
    Test                  goto 134
    TestList              goto 6
}

State 1 {

    "\n"+                 -> "\n"+ . "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Stmt> "\n"*)+       -> . (<Stmt> "\n"*)+ Stmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Stmt> "\n"*)+       -> . (<Stmt> "\n"*)+ Stmt "\n"+
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Stmt> "\n"*)+       -> . Stmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Stmt> "\n"*)+       -> . Stmt "\n"+
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Test> ",")+         -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Test> ",")+         -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest               -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest               -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignStmt            -> . AssignStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignStmt_           -> . TestList Type AssignOp TestList
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr            -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr            -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr             -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr             -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr            -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr            -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DefStmt               -> . DefStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DefStmt_              -> . "def" "IDENTIFIER" "(" COMMA<ParameterTyped> ")" ReturnType ":" Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp              -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_             -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ExprStmt              -> . ExprStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ExprStmt_             -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ForStmt               -> . ForStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ForStmt_              -> . "for" ExprList "in" Test ":" Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    IfStmt                -> . IfStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    IfStmt_               -> . "if" IfBody_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . (<Test> ",")+ Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef               -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp              -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_             -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmt              -> . LoadStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner         -> . "load" "(" "STRING" ("," <LoadStmtSyms>)+ ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner         -> . "load" "(" "STRING" ("," <LoadStmtSyms>)+ "," ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmt_             -> . LoadStmtInner
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest               -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest               -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest                -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest                -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt (";" <SmallStmt>)+ "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt (";" <SmallStmt>)+ ";" "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt ";" "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . AssignStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . ExprStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . LoadStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "break"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "continue"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "pass"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "return"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "return" TestList
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Starlark              -> "\n"+ .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Starlark              -> "\n"+ . (<Stmt> "\n"*)+
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Stmt                  -> . DefStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Stmt                  -> . ForStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Stmt                  -> . IfStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Stmt                  -> . SimpleStmt<SmallStmt>
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    TestList              -> . L<Test>
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Starlark -> "\n"+
        lookahead EOF

    "\n"                  shift and goto 145
    "("                   shift and goto 7
    "+"                   shift and goto 8
    "-"                   shift and goto 9
    "FLOAT"               shift and goto 136
    "IDENTIFIER"          shift and goto 137
    "INTEGER"             shift and goto 138
    "STRING"              shift and goto 139
    "["                   shift and goto 10
    "break"               shift and goto 140
    "continue"            shift and goto 141
    "def"                 shift and goto 142
    "for"                 shift and goto 11
    "if"                  shift and goto 12
    "lambda"              shift and goto 13
    "load"                shift and goto 143
    "not"                 shift and goto 14
    "pass"                shift and goto 144
    "return"              shift and goto 15
    "{"                   shift and goto 16
    "~"                   shift and goto 17

    (<Stmt> "\n"*)+       goto 18
    (<Test> ",")+         goto 3
    AndTest               goto 100
    ArithExpr             goto 101
    AssignStmt            goto 102
    AssignStmt_           goto 103
    BitAndExpr            goto 104
    BitOrExpr             goto 105
    BitXorExpr            goto 106
    CompTest              goto 107
    DefStmt               goto 108
    DefStmt_              goto 109
    DictComp              goto 110
    DictComp_             goto 111
    ExprStmt              goto 112
    ExprStmt_             goto 113
    FactorExpr            goto 114
    ForStmt               goto 115
    ForStmt_              goto 116
    IfStmt                goto 117
    IfStmt_               goto 118
    L<Test>               goto 119
    LambDef               goto 120
    ListComp              goto 121
    ListComp_             goto 122
    LoadStmt              goto 123
    LoadStmtInner         goto 124
    LoadStmt_             goto 125
    NotTest               goto 126
    Operand               goto 127
    OrTest                goto 128
    PrimaryExpr           goto 129
    ProductExpr           goto 130
    ShiftExpr             goto 131
    SimpleStmt<SmallStmt> goto 132
    SmallStmt             goto 4
    Stmt                  goto 5
    Test                  goto 134
    TestList              goto 6
}

State 2 {

    (<Stmt> "\n"*)+       -> (<Stmt> "\n"*)+ . Stmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Stmt> "\n"*)+       -> (<Stmt> "\n"*)+ . Stmt "\n"+
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Test> ",")+         -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Test> ",")+         -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest               -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest               -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignStmt            -> . AssignStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignStmt_           -> . TestList Type AssignOp TestList
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr            -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr            -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr             -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr             -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr            -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr            -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DefStmt               -> . DefStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DefStmt_              -> . "def" "IDENTIFIER" "(" COMMA<ParameterTyped> ")" ReturnType ":" Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp              -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_             -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ExprStmt              -> . ExprStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ExprStmt_             -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ForStmt               -> . ForStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ForStmt_              -> . "for" ExprList "in" Test ":" Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    IfStmt                -> . IfStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    IfStmt_               -> . "if" IfBody_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . (<Test> ",")+ Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef               -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp              -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_             -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmt              -> . LoadStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner         -> . "load" "(" "STRING" ("," <LoadStmtSyms>)+ ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner         -> . "load" "(" "STRING" ("," <LoadStmtSyms>)+ "," ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmt_             -> . LoadStmtInner
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest               -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest               -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest                -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest                -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt (";" <SmallStmt>)+ "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt (";" <SmallStmt>)+ ";" "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt ";" "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . AssignStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . ExprStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . LoadStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "break"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "continue"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "pass"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "return"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "return" TestList
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Starlark              -> (<Stmt> "\n"*)+ .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Stmt                  -> . DefStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Stmt                  -> . ForStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Stmt                  -> . IfStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Stmt                  -> . SimpleStmt<SmallStmt>
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    TestList              -> . L<Test>
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Starlark -> (<Stmt> "\n"*)+
        lookahead EOF

    "("                   shift and goto 7
    "+"                   shift and goto 8
    "-"                   shift and goto 9
    "FLOAT"               shift and goto 136
    "IDENTIFIER"          shift and goto 137
    "INTEGER"             shift and goto 138
    "STRING"              shift and goto 139
    "["                   shift and goto 10
    "break"               shift and goto 140
    "continue"            shift and goto 141
    "def"                 shift and goto 142
    "for"                 shift and goto 11
    "if"                  shift and goto 12
    "lambda"              shift and goto 13
    "load"                shift and goto 143
    "not"                 shift and goto 14
    "pass"                shift and goto 144
    "return"              shift and goto 15
    "{"                   shift and goto 16
    "~"                   shift and goto 17

    (<Test> ",")+         goto 3
    AndTest               goto 100
    ArithExpr             goto 101
    AssignStmt            goto 102
    AssignStmt_           goto 103
    BitAndExpr            goto 104
    BitOrExpr             goto 105
    BitXorExpr            goto 106
    CompTest              goto 107
    DefStmt               goto 108
    DefStmt_              goto 109
    DictComp              goto 110
    DictComp_             goto 111
    ExprStmt              goto 112
    ExprStmt_             goto 113
    FactorExpr            goto 114
    ForStmt               goto 115
    ForStmt_              goto 116
    IfStmt                goto 117
    IfStmt_               goto 118
    L<Test>               goto 119
    LambDef               goto 120
    ListComp              goto 121
    ListComp_             goto 122
    LoadStmt              goto 123
    LoadStmtInner         goto 124
    LoadStmt_             goto 125
    NotTest               goto 126
    Operand               goto 127
    OrTest                goto 128
    PrimaryExpr           goto 129
    ProductExpr           goto 130
    ShiftExpr             goto 131
    SimpleStmt<SmallStmt> goto 132
    SmallStmt             goto 4
    Stmt                  goto 19
    Test                  goto 134
    TestList              goto 6
}

State 3 {

    (<Test> ",")+ -> (<Test> ",")+ . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest       -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest       -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr     -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr     -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr     -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr    -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr    -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr     -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr     -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr    -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr    -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp      -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_     -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>       -> (<Test> ",")+ . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>       -> (<Test> ",")+ . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef       -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp      -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_     -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest       -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest       -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest        -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest        -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr     -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr     -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr     -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test          -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test          -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test          -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "lambda"    shift and goto 13
    "not"       shift and goto 14
    "{"         shift and goto 16
    "~"         shift and goto 17

    AndTest     goto 100
    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 105
    BitXorExpr  goto 106
    CompTest    goto 107
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    LambDef     goto 120
    ListComp    goto 121
    ListComp_   goto 122
    NotTest     goto 126
    Operand     goto 127
    OrTest      goto 128
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
    Test        goto 146
}

State 4 {

    (";" <SmallStmt>)+    -> . (";" <SmallStmt>)+ ";" SmallStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (";" <SmallStmt>)+    -> . ";" SmallStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> SmallStmt . (";" <SmallStmt>)+ "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> SmallStmt . (";" <SmallStmt>)+ ";" "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> SmallStmt . "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> SmallStmt . ";" "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "\n"               shift and goto 150
    ";"                shift and goto 43

    (";" <SmallStmt>)+ goto 149
}

State 5 {

    "\n"+           -> . "\n"+ "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "\n"+           -> . "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Stmt> "\n"*)+ -> Stmt .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Stmt> "\n"*)+ -> Stmt . "\n"+
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction (<Stmt> "\n"*)+ -> Stmt
        lookahead "(" "+" "-" "DEDENT" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "break" "continue" "def" "for" "if" "lambda" "load" "not" "pass" "return" "{" "~" EOF

    "\n"  shift and goto 135

    "\n"+ goto 151
}

State 6 {

    AssignStmt_ -> TestList . Type AssignOp TestList
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Type        -> .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Type        -> . ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Type ->
        lookahead "%=" "&=" "*=" "+=" "-=" "//=" "<<=" "=" ">>=" "^=" "|="

    ":"  shift and goto 45

    Type goto 44
}

State 7 {

    (<Test> ",")+ -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Test> ",")+ -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest       -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest       -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr     -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr     -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr     -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr    -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr    -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr     -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr     -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr    -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr    -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp      -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_     -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>       -> . (<Test> ",")+ Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>       -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>       -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>       -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef       -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp      -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_     -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest       -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest       -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> "(" . TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> "(" . ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest        -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest        -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr     -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr     -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr     -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test          -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test          -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test          -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    TestList      -> . L<Test>
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("           shift and goto 7
    ")"           shift and goto 155
    "+"           shift and goto 8
    "-"           shift and goto 9
    "FLOAT"       shift and goto 136
    "IDENTIFIER"  shift and goto 137
    "INTEGER"     shift and goto 138
    "STRING"      shift and goto 139
    "["           shift and goto 10
    "lambda"      shift and goto 13
    "not"         shift and goto 14
    "{"           shift and goto 16
    "~"           shift and goto 17

    (<Test> ",")+ goto 3
    AndTest       goto 100
    ArithExpr     goto 101
    BitAndExpr    goto 104
    BitOrExpr     goto 105
    BitXorExpr    goto 106
    CompTest      goto 107
    DictComp      goto 110
    DictComp_     goto 111
    FactorExpr    goto 114
    L<Test>       goto 119
    LambDef       goto 120
    ListComp      goto 121
    ListComp_     goto 122
    NotTest       goto 126
    Operand       goto 127
    OrTest        goto 128
    PrimaryExpr   goto 129
    ProductExpr   goto 130
    ShiftExpr     goto 131
    Test          goto 153
    TestList      goto 154
}

State 8 {

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> "+" . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "{"         shift and goto 16
    "~"         shift and goto 17

    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 156
    ListComp    goto 121
    ListComp_   goto 122
    Operand     goto 127
    PrimaryExpr goto 129
}

State 9 {

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> "-" . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "{"         shift and goto 16
    "~"         shift and goto 17

    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 157
    ListComp    goto 121
    ListComp_   goto 122
    Operand     goto 127
    PrimaryExpr goto 129
}

State 10 {

    (<Test> ",")+ -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Test> ",")+ -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest       -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest       -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr     -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr     -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr     -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr    -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr    -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr     -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr     -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr    -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr    -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<Test>   -> .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<Test>   -> . (<Test> ",")+
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<Test>   -> . (<Test> ",")+ Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<Test>   -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp      -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_     -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef       -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp      -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_     -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_     -> "[" . Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest       -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest       -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> "[" . COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest        -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest        -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr     -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr     -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr     -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test          -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test          -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test          -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction COMMA<Test> ->
        lookahead "]"

    "("           shift and goto 7
    "+"           shift and goto 8
    "-"           shift and goto 9
    "FLOAT"       shift and goto 136
    "IDENTIFIER"  shift and goto 137
    "INTEGER"     shift and goto 138
    "STRING"      shift and goto 139
    "["           shift and goto 10
    "lambda"      shift and goto 13
    "not"         shift and goto 14
    "{"           shift and goto 16
    "~"           shift and goto 17

    (<Test> ",")+ goto 46
    AndTest       goto 100
    ArithExpr     goto 101
    BitAndExpr    goto 104
    BitOrExpr     goto 105
    BitXorExpr    goto 106
    COMMA<Test>   goto 158
    CompTest      goto 107
    DictComp      goto 110
    DictComp_     goto 111
    FactorExpr    goto 114
    LambDef       goto 120
    ListComp      goto 121
    ListComp_     goto 122
    NotTest       goto 126
    Operand       goto 127
    OrTest        goto 128
    PrimaryExpr   goto 129
    ProductExpr   goto 130
    ShiftExpr     goto 131
    Test          goto 47
}

State 11 {

    (<Expr> ",")+ -> . (<Expr> ",")+ Expr ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Expr> ",")+ -> . Expr ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr     -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr     -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr     -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr    -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr    -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr     -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr     -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr    -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr    -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp      -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_     -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Expr          -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ExprList      -> . L<Expr>
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ForStmt_      -> "for" . ExprList "in" Test ":" Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Expr>       -> . (<Expr> ",")+ Expr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Expr>       -> . (<Expr> ",")+ Expr ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Expr>       -> . Expr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Expr>       -> . Expr ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp      -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_     -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr     -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr     -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr     -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("           shift and goto 7
    "+"           shift and goto 8
    "-"           shift and goto 9
    "FLOAT"       shift and goto 136
    "IDENTIFIER"  shift and goto 137
    "INTEGER"     shift and goto 138
    "STRING"      shift and goto 139
    "["           shift and goto 10
    "{"           shift and goto 16
    "~"           shift and goto 17

    (<Expr> ",")+ goto 48
    ArithExpr     goto 101
    BitAndExpr    goto 104
    BitOrExpr     goto 160
    BitXorExpr    goto 106
    DictComp      goto 110
    DictComp_     goto 111
    Expr          goto 161
    ExprList      goto 162
    FactorExpr    goto 114
    L<Expr>       goto 163
    ListComp      goto 121
    ListComp_     goto 122
    Operand       goto 127
    PrimaryExpr   goto 129
    ProductExpr   goto 130
    ShiftExpr     goto 131
}

State 12 {

    AndTest     -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest     -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    IfBody_     -> . Test ":" Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    IfBody_     -> . Test ":" Suite ElseStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    IfStmt_     -> "if" . IfBody_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef     -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "lambda"    shift and goto 13
    "not"       shift and goto 14
    "{"         shift and goto 16
    "~"         shift and goto 17

    AndTest     goto 100
    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 105
    BitXorExpr  goto 106
    CompTest    goto 107
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    IfBody_     goto 164
    LambDef     goto 120
    ListComp    goto 121
    ListComp_   goto 122
    NotTest     goto 126
    Operand     goto 127
    OrTest      goto 128
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
    Test        goto 165
}

State 13 {

    (<Parameter> ",")+ -> . (<Parameter> ",")+ Parameter ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Parameter> ",")+ -> . Parameter ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignIdent        -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<Parameter>   -> .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<Parameter>   -> . (<Parameter> ",")+
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<Parameter>   -> . (<Parameter> ",")+ Parameter
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<Parameter>   -> . Parameter
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef            -> "lambda" . COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Parameter          -> . Parameter_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Parameter_         -> . AssignIdent
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Parameter_         -> . AssignIdent "=" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Parameter_         -> . "*"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Parameter_         -> . "*" AssignIdent
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Parameter_         -> . "**" AssignIdent
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction COMMA<Parameter> ->
        lookahead ":"

    "*"                shift and goto 50
    "**"               shift and goto 51
    "IDENTIFIER"       shift and goto 170

    (<Parameter> ",")+ goto 49
    AssignIdent        goto 166
    COMMA<Parameter>   goto 167
    Parameter          goto 168
    Parameter_         goto 169
}

State 14 {

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> "not" . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "not"       shift and goto 14
    "{"         shift and goto 16
    "~"         shift and goto 17

    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 105
    BitXorExpr  goto 106
    CompTest    goto 107
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    ListComp    goto 121
    ListComp_   goto 122
    NotTest     goto 172
    Operand     goto 127
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
}

State 15 {

    (<Test> ",")+ -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Test> ",")+ -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest       -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest       -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr     -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr     -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr     -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr    -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr    -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr     -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr     -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr    -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr    -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp      -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_     -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>       -> . (<Test> ",")+ Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>       -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>       -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>       -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef       -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp      -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_     -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest       -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest       -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest        -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest        -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr     -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr     -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr     -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt     -> "return" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt     -> "return" . TestList
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test          -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test          -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test          -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    TestList      -> . L<Test>
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction SmallStmt -> "return"
        lookahead "\n" ";"

    "("           shift and goto 7
    "+"           shift and goto 8
    "-"           shift and goto 9
    "FLOAT"       shift and goto 136
    "IDENTIFIER"  shift and goto 137
    "INTEGER"     shift and goto 138
    "STRING"      shift and goto 139
    "["           shift and goto 10
    "lambda"      shift and goto 13
    "not"         shift and goto 14
    "{"           shift and goto 16
    "~"           shift and goto 17

    (<Test> ",")+ goto 3
    AndTest       goto 100
    ArithExpr     goto 101
    BitAndExpr    goto 104
    BitOrExpr     goto 105
    BitXorExpr    goto 106
    CompTest      goto 107
    DictComp      goto 110
    DictComp_     goto 111
    FactorExpr    goto 114
    L<Test>       goto 119
    LambDef       goto 120
    ListComp      goto 121
    ListComp_     goto 122
    NotTest       goto 126
    Operand       goto 127
    OrTest        goto 128
    PrimaryExpr   goto 129
    ProductExpr   goto 130
    ShiftExpr     goto 131
    Test          goto 153
    TestList      goto 173
}

State 16 {

    (<DictEntry> ",")+ -> . (<DictEntry> ",")+ DictEntry ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<DictEntry> ",")+ -> . DictEntry ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest            -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest            -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr          -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr          -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr          -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr         -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr         -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr          -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr          -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr         -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr         -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<DictEntry>   -> .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<DictEntry>   -> . (<DictEntry> ",")+
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<DictEntry>   -> . (<DictEntry> ",")+ DictEntry
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<DictEntry>   -> . DictEntry
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest           -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest           -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest           -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest           -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest           -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest           -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest           -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest           -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest           -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp           -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_          -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_          -> "{" . DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictEntry          -> . Test ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr         -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr         -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr         -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr         -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef            -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp           -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_          -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest            -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest            -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand            -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand            -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand            -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand            -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand            -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand            -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand            -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand            -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand            -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand            -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand            -> "{" . COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest             -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest             -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr        -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr        -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr        -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr        -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr        -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr        -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr        -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr        -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr        -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr        -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr        -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr        -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr        -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr        -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr        -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr        -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr        -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr        -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr        -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr        -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr        -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr          -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr          -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr          -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test               -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test               -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test               -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction COMMA<DictEntry> ->
        lookahead "}"

    "("                shift and goto 7
    "+"                shift and goto 8
    "-"                shift and goto 9
    "FLOAT"            shift and goto 136
    "IDENTIFIER"       shift and goto 137
    "INTEGER"          shift and goto 138
    "STRING"           shift and goto 139
    "["                shift and goto 10
    "lambda"           shift and goto 13
    "not"              shift and goto 14
    "{"                shift and goto 16
    "~"                shift and goto 17

    (<DictEntry> ",")+ goto 52
    AndTest            goto 100
    ArithExpr          goto 101
    BitAndExpr         goto 104
    BitOrExpr          goto 105
    BitXorExpr         goto 106
    COMMA<DictEntry>   goto 174
    CompTest           goto 107
    DictComp           goto 110
    DictComp_          goto 111
    DictEntry          goto 53
    FactorExpr         goto 114
    LambDef            goto 120
    ListComp           goto 121
    ListComp_          goto 122
    NotTest            goto 126
    Operand            goto 127
    OrTest             goto 128
    PrimaryExpr        goto 129
    ProductExpr        goto 130
    ShiftExpr          goto 131
    Test               goto 175
}

State 17 {

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> "~" . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "{"         shift and goto 16
    "~"         shift and goto 17

    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 176
    ListComp    goto 121
    ListComp_   goto 122
    Operand     goto 127
    PrimaryExpr goto 129
}

State 18 {

    (<Stmt> "\n"*)+       -> (<Stmt> "\n"*)+ . Stmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Stmt> "\n"*)+       -> (<Stmt> "\n"*)+ . Stmt "\n"+
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Test> ",")+         -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Test> ",")+         -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest               -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest               -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignStmt            -> . AssignStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignStmt_           -> . TestList Type AssignOp TestList
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr            -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr            -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr             -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr             -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr            -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr            -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DefStmt               -> . DefStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DefStmt_              -> . "def" "IDENTIFIER" "(" COMMA<ParameterTyped> ")" ReturnType ":" Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp              -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_             -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ExprStmt              -> . ExprStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ExprStmt_             -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ForStmt               -> . ForStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ForStmt_              -> . "for" ExprList "in" Test ":" Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    IfStmt                -> . IfStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    IfStmt_               -> . "if" IfBody_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . (<Test> ",")+ Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef               -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp              -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_             -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmt              -> . LoadStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner         -> . "load" "(" "STRING" ("," <LoadStmtSyms>)+ ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner         -> . "load" "(" "STRING" ("," <LoadStmtSyms>)+ "," ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmt_             -> . LoadStmtInner
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest               -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest               -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest                -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest                -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt (";" <SmallStmt>)+ "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt (";" <SmallStmt>)+ ";" "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt ";" "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . AssignStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . ExprStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . LoadStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "break"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "continue"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "pass"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "return"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "return" TestList
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Starlark              -> "\n"+ (<Stmt> "\n"*)+ .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Stmt                  -> . DefStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Stmt                  -> . ForStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Stmt                  -> . IfStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Stmt                  -> . SimpleStmt<SmallStmt>
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    TestList              -> . L<Test>
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Starlark -> "\n"+ (<Stmt> "\n"*)+
        lookahead EOF

    "("                   shift and goto 7
    "+"                   shift and goto 8
    "-"                   shift and goto 9
    "FLOAT"               shift and goto 136
    "IDENTIFIER"          shift and goto 137
    "INTEGER"             shift and goto 138
    "STRING"              shift and goto 139
    "["                   shift and goto 10
    "break"               shift and goto 140
    "continue"            shift and goto 141
    "def"                 shift and goto 142
    "for"                 shift and goto 11
    "if"                  shift and goto 12
    "lambda"              shift and goto 13
    "load"                shift and goto 143
    "not"                 shift and goto 14
    "pass"                shift and goto 144
    "return"              shift and goto 15
    "{"                   shift and goto 16
    "~"                   shift and goto 17

    (<Test> ",")+         goto 3
    AndTest               goto 100
    ArithExpr             goto 101
    AssignStmt            goto 102
    AssignStmt_           goto 103
    BitAndExpr            goto 104
    BitOrExpr             goto 105
    BitXorExpr            goto 106
    CompTest              goto 107
    DefStmt               goto 108
    DefStmt_              goto 109
    DictComp              goto 110
    DictComp_             goto 111
    ExprStmt              goto 112
    ExprStmt_             goto 113
    FactorExpr            goto 114
    ForStmt               goto 115
    ForStmt_              goto 116
    IfStmt                goto 117
    IfStmt_               goto 118
    L<Test>               goto 119
    LambDef               goto 120
    ListComp              goto 121
    ListComp_             goto 122
    LoadStmt              goto 123
    LoadStmtInner         goto 124
    LoadStmt_             goto 125
    NotTest               goto 126
    Operand               goto 127
    OrTest                goto 128
    PrimaryExpr           goto 129
    ProductExpr           goto 130
    ShiftExpr             goto 131
    SimpleStmt<SmallStmt> goto 132
    SmallStmt             goto 4
    Stmt                  goto 19
    Test                  goto 134
    TestList              goto 6
}

State 19 {

    "\n"+           -> . "\n"+ "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "\n"+           -> . "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Stmt> "\n"*)+ -> (<Stmt> "\n"*)+ Stmt .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Stmt> "\n"*)+ -> (<Stmt> "\n"*)+ Stmt . "\n"+
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction (<Stmt> "\n"*)+ -> (<Stmt> "\n"*)+ Stmt
        lookahead "(" "+" "-" "DEDENT" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "break" "continue" "def" "for" "if" "lambda" "load" "not" "pass" "return" "{" "~" EOF

    "\n"  shift and goto 135

    "\n"+ goto 177
}

State 20 {

    AndTest     -> AndTest "and" . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "not"       shift and goto 14
    "{"         shift and goto 16
    "~"         shift and goto 17

    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 105
    BitXorExpr  goto 106
    CompTest    goto 107
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    ListComp    goto 121
    ListComp_   goto 122
    NotTest     goto 179
    Operand     goto 127
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
}

State 21 {

    ArithExpr   -> ArithExpr "+" . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "{"         shift and goto 16
    "~"         shift and goto 17

    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    ListComp    goto 121
    ListComp_   goto 122
    Operand     goto 127
    PrimaryExpr goto 129
    ProductExpr goto 180
}

State 22 {

    ArithExpr   -> ArithExpr "-" . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "{"         shift and goto 16
    "~"         shift and goto 17

    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    ListComp    goto 121
    ListComp_   goto 122
    Operand     goto 127
    PrimaryExpr goto 129
    ProductExpr goto 181
}

State 23 {

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> BitAndExpr "&" . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "{"         shift and goto 16
    "~"         shift and goto 17

    ArithExpr   goto 101
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    ListComp    goto 121
    ListComp_   goto 122
    Operand     goto 127
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 182
}

State 24 {

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> BitOrExpr "!=" . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "{"         shift and goto 16
    "~"         shift and goto 17

    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 183
    BitXorExpr  goto 106
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    ListComp    goto 121
    ListComp_   goto 122
    Operand     goto 127
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
}

State 25 {

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> BitOrExpr "<" . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "{"         shift and goto 16
    "~"         shift and goto 17

    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 184
    BitXorExpr  goto 106
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    ListComp    goto 121
    ListComp_   goto 122
    Operand     goto 127
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
}

State 26 {

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> BitOrExpr "<=" . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "{"         shift and goto 16
    "~"         shift and goto 17

    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 185
    BitXorExpr  goto 106
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    ListComp    goto 121
    ListComp_   goto 122
    Operand     goto 127
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
}

State 27 {

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> BitOrExpr "==" . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "{"         shift and goto 16
    "~"         shift and goto 17

    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 186
    BitXorExpr  goto 106
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    ListComp    goto 121
    ListComp_   goto 122
    Operand     goto 127
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
}

State 28 {

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> BitOrExpr ">" . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "{"         shift and goto 16
    "~"         shift and goto 17

    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 187
    BitXorExpr  goto 106
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    ListComp    goto 121
    ListComp_   goto 122
    Operand     goto 127
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
}

State 29 {

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> BitOrExpr ">=" . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "{"         shift and goto 16
    "~"         shift and goto 17

    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 188
    BitXorExpr  goto 106
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    ListComp    goto 121
    ListComp_   goto 122
    Operand     goto 127
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
}

State 30 {

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> BitOrExpr "in" . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "{"         shift and goto 16
    "~"         shift and goto 17

    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 189
    BitXorExpr  goto 106
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    ListComp    goto 121
    ListComp_   goto 122
    Operand     goto 127
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
}

State 31 {

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> BitOrExpr "|" . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "{"         shift and goto 16
    "~"         shift and goto 17

    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitXorExpr  goto 190
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    ListComp    goto 121
    ListComp_   goto 122
    Operand     goto 127
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
}

State 32 {

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> BitXorExpr "^" . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "{"         shift and goto 16
    "~"         shift and goto 17

    ArithExpr   goto 101
    BitAndExpr  goto 191
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    ListComp    goto 121
    ListComp_   goto 122
    Operand     goto 127
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
}

State 33 {

    AndTest     -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest     -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> OrTest "if" . OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "not"       shift and goto 14
    "{"         shift and goto 16
    "~"         shift and goto 17

    AndTest     goto 100
    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 105
    BitXorExpr  goto 106
    CompTest    goto 107
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    ListComp    goto 121
    ListComp_   goto 122
    NotTest     goto 126
    Operand     goto 127
    OrTest      goto 192
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
}

State 34 {

    AndTest     -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest     -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> OrTest "or" . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "not"       shift and goto 14
    "{"         shift and goto 16
    "~"         shift and goto 17

    AndTest     goto 193
    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 105
    BitXorExpr  goto 106
    CompTest    goto 107
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    ListComp    goto 121
    ListComp_   goto 122
    NotTest     goto 126
    Operand     goto 127
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
}

State 35 {

    (<Argument> ",")+ -> . (<Argument> ",")+ Argument ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Argument> ",")+ -> . Argument ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest           -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest           -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Argument          -> . Argument_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Argument_         -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Argument_         -> . "*" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Argument_         -> . "**" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Argument_         -> . "IDENTIFIER" "=" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr         -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr         -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr         -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr        -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr        -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr         -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr         -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr        -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr        -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<Argument>   -> .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<Argument>   -> . (<Argument> ",")+
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<Argument>   -> . (<Argument> ",")+ Argument
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<Argument>   -> . Argument
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest          -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest          -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest          -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest          -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest          -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest          -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest          -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest          -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest          -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp          -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_         -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr        -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr        -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr        -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr        -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef           -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp          -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_         -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest           -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest           -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand           -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand           -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand           -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand           -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand           -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand           -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand           -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand           -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand           -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand           -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest            -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest            -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr       -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr       -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr       -> PrimaryExpr "(" . COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr       -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr       -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr       -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr       -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr       -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr       -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr       -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr       -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr       -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr       -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr       -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr       -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr       -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr       -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr       -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr       -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr       -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr       -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr       -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr         -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr         -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr         -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test              -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test              -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test              -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction COMMA<Argument> ->
        lookahead ")"

    "("               shift and goto 7
    "*"               shift and goto 56
    "**"              shift and goto 57
    "+"               shift and goto 8
    "-"               shift and goto 9
    "FLOAT"           shift and goto 136
    "IDENTIFIER"      shift and goto 198
    "INTEGER"         shift and goto 138
    "STRING"          shift and goto 139
    "["               shift and goto 10
    "lambda"          shift and goto 13
    "not"             shift and goto 14
    "{"               shift and goto 16
    "~"               shift and goto 17

    (<Argument> ",")+ goto 55
    AndTest           goto 100
    Argument          goto 194
    Argument_         goto 195
    ArithExpr         goto 101
    BitAndExpr        goto 104
    BitOrExpr         goto 105
    BitXorExpr        goto 106
    COMMA<Argument>   goto 196
    CompTest          goto 107
    DictComp          goto 110
    DictComp_         goto 111
    FactorExpr        goto 114
    LambDef           goto 120
    ListComp          goto 121
    ListComp_         goto 122
    NotTest           goto 126
    Operand           goto 127
    OrTest            goto 128
    PrimaryExpr       goto 129
    ProductExpr       goto 130
    ShiftExpr         goto 131
    Test              goto 197
}

State 36 {

    (<Test> ",")+ -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Test> ",")+ -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest       -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest       -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr     -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr     -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr     -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr    -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr    -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr     -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr     -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr    -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr    -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp      -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_     -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>       -> . (<Test> ",")+ Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>       -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>       -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>       -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef       -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp      -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_     -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest       -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest       -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest        -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest        -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> PrimaryExpr "[" . Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> PrimaryExpr "[" . Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> PrimaryExpr "[" . Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> PrimaryExpr "[" . Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> PrimaryExpr "[" . Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> PrimaryExpr "[" . Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> PrimaryExpr "[" . TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> PrimaryExpr "[" . ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> PrimaryExpr "[" . ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> PrimaryExpr "[" . ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> PrimaryExpr "[" . ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> PrimaryExpr "[" . ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> PrimaryExpr "[" . ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr     -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr     -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr     -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test          -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test          -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test          -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    TestList      -> . L<Test>
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("           shift and goto 7
    "+"           shift and goto 8
    "-"           shift and goto 9
    ":"           shift and goto 58
    "FLOAT"       shift and goto 136
    "IDENTIFIER"  shift and goto 137
    "INTEGER"     shift and goto 138
    "STRING"      shift and goto 139
    "["           shift and goto 10
    "lambda"      shift and goto 13
    "not"         shift and goto 14
    "{"           shift and goto 16
    "~"           shift and goto 17

    (<Test> ",")+ goto 3
    AndTest       goto 100
    ArithExpr     goto 101
    BitAndExpr    goto 104
    BitOrExpr     goto 105
    BitXorExpr    goto 106
    CompTest      goto 107
    DictComp      goto 110
    DictComp_     goto 111
    FactorExpr    goto 114
    L<Test>       goto 119
    LambDef       goto 120
    ListComp      goto 121
    ListComp_     goto 122
    NotTest       goto 126
    Operand       goto 127
    OrTest        goto 128
    PrimaryExpr   goto 129
    ProductExpr   goto 130
    ShiftExpr     goto 131
    Test          goto 200
    TestList      goto 201
}

State 37 {

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> ProductExpr "%" . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "{"         shift and goto 16
    "~"         shift and goto 17

    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 202
    ListComp    goto 121
    ListComp_   goto 122
    Operand     goto 127
    PrimaryExpr goto 129
}

State 38 {

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> ProductExpr "*" . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "{"         shift and goto 16
    "~"         shift and goto 17

    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 203
    ListComp    goto 121
    ListComp_   goto 122
    Operand     goto 127
    PrimaryExpr goto 129
}

State 39 {

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> ProductExpr "/" . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "{"         shift and goto 16
    "~"         shift and goto 17

    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 204
    ListComp    goto 121
    ListComp_   goto 122
    Operand     goto 127
    PrimaryExpr goto 129
}

State 40 {

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> ProductExpr "//" . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "{"         shift and goto 16
    "~"         shift and goto 17

    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 205
    ListComp    goto 121
    ListComp_   goto 122
    Operand     goto 127
    PrimaryExpr goto 129
}

State 41 {

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> ShiftExpr "<<" . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "{"         shift and goto 16
    "~"         shift and goto 17

    ArithExpr   goto 206
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    ListComp    goto 121
    ListComp_   goto 122
    Operand     goto 127
    PrimaryExpr goto 129
    ProductExpr goto 130
}

State 42 {

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> ShiftExpr ">>" . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "{"         shift and goto 16
    "~"         shift and goto 17

    ArithExpr   goto 207
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    ListComp    goto 121
    ListComp_   goto 122
    Operand     goto 127
    PrimaryExpr goto 129
    ProductExpr goto 130
}

State 43 {

    (";" <SmallStmt>)+    -> ";" . SmallStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Test> ",")+         -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Test> ",")+         -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest               -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest               -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignStmt            -> . AssignStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignStmt_           -> . TestList Type AssignOp TestList
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr            -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr            -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr             -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr             -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr            -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr            -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp              -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_             -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ExprStmt              -> . ExprStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ExprStmt_             -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . (<Test> ",")+ Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef               -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp              -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_             -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmt              -> . LoadStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner         -> . "load" "(" "STRING" ("," <LoadStmtSyms>)+ ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner         -> . "load" "(" "STRING" ("," <LoadStmtSyms>)+ "," ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmt_             -> . LoadStmtInner
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest               -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest               -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest                -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest                -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> SmallStmt ";" . "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . AssignStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . ExprStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . LoadStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "break"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "continue"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "pass"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "return"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "return" TestList
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    TestList              -> . L<Test>
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "\n"          shift and goto 210
    "("           shift and goto 7
    "+"           shift and goto 8
    "-"           shift and goto 9
    "FLOAT"       shift and goto 136
    "IDENTIFIER"  shift and goto 137
    "INTEGER"     shift and goto 138
    "STRING"      shift and goto 139
    "["           shift and goto 10
    "break"       shift and goto 140
    "continue"    shift and goto 141
    "lambda"      shift and goto 13
    "load"        shift and goto 143
    "not"         shift and goto 14
    "pass"        shift and goto 144
    "return"      shift and goto 15
    "{"           shift and goto 16
    "~"           shift and goto 17

    (<Test> ",")+ goto 3
    AndTest       goto 100
    ArithExpr     goto 101
    AssignStmt    goto 102
    AssignStmt_   goto 103
    BitAndExpr    goto 104
    BitOrExpr     goto 105
    BitXorExpr    goto 106
    CompTest      goto 107
    DictComp      goto 110
    DictComp_     goto 111
    ExprStmt      goto 112
    ExprStmt_     goto 113
    FactorExpr    goto 114
    L<Test>       goto 119
    LambDef       goto 120
    ListComp      goto 121
    ListComp_     goto 122
    LoadStmt      goto 123
    LoadStmtInner goto 124
    LoadStmt_     goto 125
    NotTest       goto 126
    Operand       goto 127
    OrTest        goto 128
    PrimaryExpr   goto 129
    ProductExpr   goto 130
    ShiftExpr     goto 131
    SmallStmt     goto 209
    Test          goto 134
    TestList      goto 6
}

State 44 {

    AssignOp    -> . "%="
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignOp    -> . "&="
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignOp    -> . "*="
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignOp    -> . "+="
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignOp    -> . "-="
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignOp    -> . "//="
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignOp    -> . "<<="
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignOp    -> . "="
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignOp    -> . ">>="
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignOp    -> . "^="
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignOp    -> . "|="
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignStmt_ -> TestList Type . AssignOp TestList
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "%="     shift and goto 211
    "&="     shift and goto 212
    "*="     shift and goto 213
    "+="     shift and goto 214
    "-="     shift and goto 215
    "//="    shift and goto 216
    "<<="    shift and goto 217
    "="      shift and goto 218
    ">>="    shift and goto 219
    "^="     shift and goto 220
    "|="     shift and goto 221

    AssignOp goto 60
}

State 45 {

    AndTest     -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest     -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef     -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Type        -> ":" . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "lambda"    shift and goto 13
    "not"       shift and goto 14
    "{"         shift and goto 16
    "~"         shift and goto 17

    AndTest     goto 100
    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 105
    BitXorExpr  goto 106
    CompTest    goto 107
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    LambDef     goto 120
    ListComp    goto 121
    ListComp_   goto 122
    NotTest     goto 126
    Operand     goto 127
    OrTest      goto 128
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
    Test        goto 222
}

State 46 {

    (<Test> ",")+ -> (<Test> ",")+ . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest       -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest       -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr     -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr     -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr     -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr    -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr    -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr     -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr     -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr    -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr    -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<Test>   -> (<Test> ",")+ .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<Test>   -> (<Test> ",")+ . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp      -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_     -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef       -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp      -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_     -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest       -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest       -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest        -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest        -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr     -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr     -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr     -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test          -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test          -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test          -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction COMMA<Test> -> (<Test> ",")+
        lookahead "]"

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "lambda"    shift and goto 13
    "not"       shift and goto 14
    "{"         shift and goto 16
    "~"         shift and goto 17

    AndTest     goto 100
    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 105
    BitXorExpr  goto 106
    CompTest    goto 107
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    LambDef     goto 120
    ListComp    goto 121
    ListComp_   goto 122
    NotTest     goto 126
    Operand     goto 127
    OrTest      goto 128
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
    Test        goto 224
}

State 47 {

    (<Test> ",")+ -> Test . ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<Test>   -> Test .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompClause    -> . ForClause
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompClause    -> . ForClause Clause+
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ForClause     -> . "for" ExprList "in" OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_     -> "[" Test . CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction COMMA<Test> -> Test
        lookahead "]"

    ","        shift and goto 227
    "for"      shift and goto 62

    CompClause goto 226
    ForClause  goto 61
}

State 48 {

    (<Expr> ",")+ -> (<Expr> ",")+ . Expr ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr     -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr     -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr     -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr    -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr    -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr     -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr     -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr    -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr    -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp      -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_     -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Expr          -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Expr>       -> (<Expr> ",")+ . Expr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Expr>       -> (<Expr> ",")+ . Expr ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp      -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_     -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr     -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr     -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr     -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "{"         shift and goto 16
    "~"         shift and goto 17

    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 160
    BitXorExpr  goto 106
    DictComp    goto 110
    DictComp_   goto 111
    Expr        goto 228
    FactorExpr  goto 114
    ListComp    goto 121
    ListComp_   goto 122
    Operand     goto 127
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
}

State 49 {

    (<Parameter> ",")+ -> (<Parameter> ",")+ . Parameter ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignIdent        -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<Parameter>   -> (<Parameter> ",")+ .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<Parameter>   -> (<Parameter> ",")+ . Parameter
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Parameter          -> . Parameter_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Parameter_         -> . AssignIdent
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Parameter_         -> . AssignIdent "=" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Parameter_         -> . "*"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Parameter_         -> . "*" AssignIdent
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Parameter_         -> . "**" AssignIdent
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction COMMA<Parameter> -> (<Parameter> ",")+
        lookahead ":"

    "*"         shift and goto 50
    "**"        shift and goto 51
    "IDENTIFIER" shift and goto 170

    AssignIdent goto 166
    Parameter   goto 230
    Parameter_  goto 169
}

State 50 {

    AssignIdent -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Parameter_  -> "*" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Parameter_  -> "*" . AssignIdent
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Parameter_ -> "*"
        lookahead "," ":"

    "IDENTIFIER" shift and goto 170

    AssignIdent goto 232
}

State 51 {

    AssignIdent -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Parameter_  -> "**" . AssignIdent
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "IDENTIFIER" shift and goto 170

    AssignIdent goto 233
}

State 52 {

    (<DictEntry> ",")+ -> (<DictEntry> ",")+ . DictEntry ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest            -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest            -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr          -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr          -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr          -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr         -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr         -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr          -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr          -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr         -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr         -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<DictEntry>   -> (<DictEntry> ",")+ .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<DictEntry>   -> (<DictEntry> ",")+ . DictEntry
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest           -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest           -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest           -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest           -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest           -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest           -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest           -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest           -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest           -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp           -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_          -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictEntry          -> . Test ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr         -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr         -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr         -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr         -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef            -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp           -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_          -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest            -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest            -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand            -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand            -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand            -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand            -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand            -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand            -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand            -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand            -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand            -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand            -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest             -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest             -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr        -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr        -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr        -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr        -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr        -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr        -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr        -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr        -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr        -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr        -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr        -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr        -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr        -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr        -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr        -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr        -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr        -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr        -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr        -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr        -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr        -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr          -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr          -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr          -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test               -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test               -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test               -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction COMMA<DictEntry> -> (<DictEntry> ",")+
        lookahead "}"

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "lambda"    shift and goto 13
    "not"       shift and goto 14
    "{"         shift and goto 16
    "~"         shift and goto 17

    AndTest     goto 100
    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 105
    BitXorExpr  goto 106
    CompTest    goto 107
    DictComp    goto 110
    DictComp_   goto 111
    DictEntry   goto 234
    FactorExpr  goto 114
    LambDef     goto 120
    ListComp    goto 121
    ListComp_   goto 122
    NotTest     goto 126
    Operand     goto 127
    OrTest      goto 128
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
    Test        goto 175
}

State 53 {

    (<DictEntry> ",")+ -> DictEntry . ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<DictEntry>   -> DictEntry .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompClause         -> . ForClause
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompClause         -> . ForClause Clause+
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_          -> "{" DictEntry . CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ForClause          -> . "for" ExprList "in" OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction COMMA<DictEntry> -> DictEntry
        lookahead "}"

    ","        shift and goto 237
    "for"      shift and goto 62

    CompClause goto 236
    ForClause  goto 61
}

State 54 {

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> BitOrExpr "not" "in" . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "{"         shift and goto 16
    "~"         shift and goto 17

    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 238
    BitXorExpr  goto 106
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    ListComp    goto 121
    ListComp_   goto 122
    Operand     goto 127
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
}

State 55 {

    (<Argument> ",")+ -> (<Argument> ",")+ . Argument ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest           -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest           -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Argument          -> . Argument_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Argument_         -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Argument_         -> . "*" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Argument_         -> . "**" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Argument_         -> . "IDENTIFIER" "=" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr         -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr         -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr         -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr        -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr        -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr         -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr         -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr        -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr        -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<Argument>   -> (<Argument> ",")+ .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<Argument>   -> (<Argument> ",")+ . Argument
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest          -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest          -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest          -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest          -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest          -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest          -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest          -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest          -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest          -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp          -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_         -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr        -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr        -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr        -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr        -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef           -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp          -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_         -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest           -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest           -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand           -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand           -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand           -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand           -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand           -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand           -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand           -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand           -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand           -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand           -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest            -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest            -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr       -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr       -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr       -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr       -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr       -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr       -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr       -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr       -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr       -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr       -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr       -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr       -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr       -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr       -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr       -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr       -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr       -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr       -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr       -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr       -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr       -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr         -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr         -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr         -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test              -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test              -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test              -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction COMMA<Argument> -> (<Argument> ",")+
        lookahead ")"

    "("         shift and goto 7
    "*"         shift and goto 56
    "**"        shift and goto 57
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 198
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "lambda"    shift and goto 13
    "not"       shift and goto 14
    "{"         shift and goto 16
    "~"         shift and goto 17

    AndTest     goto 100
    Argument    goto 239
    Argument_   goto 195
    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 105
    BitXorExpr  goto 106
    CompTest    goto 107
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    LambDef     goto 120
    ListComp    goto 121
    ListComp_   goto 122
    NotTest     goto 126
    Operand     goto 127
    OrTest      goto 128
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
    Test        goto 197
}

State 56 {

    AndTest     -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest     -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Argument_   -> "*" . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef     -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "lambda"    shift and goto 13
    "not"       shift and goto 14
    "{"         shift and goto 16
    "~"         shift and goto 17

    AndTest     goto 100
    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 105
    BitXorExpr  goto 106
    CompTest    goto 107
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    LambDef     goto 120
    ListComp    goto 121
    ListComp_   goto 122
    NotTest     goto 126
    Operand     goto 127
    OrTest      goto 128
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
    Test        goto 242
}

State 57 {

    AndTest     -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest     -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Argument_   -> "**" . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef     -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "lambda"    shift and goto 13
    "not"       shift and goto 14
    "{"         shift and goto 16
    "~"         shift and goto 17

    AndTest     goto 100
    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 105
    BitXorExpr  goto 106
    CompTest    goto 107
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    LambDef     goto 120
    ListComp    goto 121
    ListComp_   goto 122
    NotTest     goto 126
    Operand     goto 127
    OrTest      goto 128
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
    Test        goto 243
}

State 58 {

    AndTest     -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest     -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef     -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr "[" ":" . Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr "[" ":" . Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr "[" ":" . Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr "[" ":" . ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr "[" ":" . ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr "[" ":" . "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    ":"         shift and goto 73
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "]"         shift and goto 246
    "lambda"    shift and goto 13
    "not"       shift and goto 14
    "{"         shift and goto 16
    "~"         shift and goto 17

    AndTest     goto 100
    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 105
    BitXorExpr  goto 106
    CompTest    goto 107
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    LambDef     goto 120
    ListComp    goto 121
    ListComp_   goto 122
    NotTest     goto 126
    Operand     goto 127
    OrTest      goto 128
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
    Test        goto 245
}

State 59 {

    (";" <SmallStmt>)+    -> (";" <SmallStmt>)+ ";" . SmallStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Test> ",")+         -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Test> ",")+         -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest               -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest               -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignStmt            -> . AssignStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignStmt_           -> . TestList Type AssignOp TestList
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr            -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr            -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr             -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr             -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr            -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr            -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp              -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_             -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ExprStmt              -> . ExprStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ExprStmt_             -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . (<Test> ",")+ Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef               -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp              -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_             -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmt              -> . LoadStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner         -> . "load" "(" "STRING" ("," <LoadStmtSyms>)+ ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner         -> . "load" "(" "STRING" ("," <LoadStmtSyms>)+ "," ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmt_             -> . LoadStmtInner
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest               -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest               -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest                -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest                -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> SmallStmt (";" <SmallStmt>)+ ";" . "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . AssignStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . ExprStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . LoadStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "break"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "continue"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "pass"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "return"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "return" TestList
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    TestList              -> . L<Test>
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "\n"          shift and goto 248
    "("           shift and goto 7
    "+"           shift and goto 8
    "-"           shift and goto 9
    "FLOAT"       shift and goto 136
    "IDENTIFIER"  shift and goto 137
    "INTEGER"     shift and goto 138
    "STRING"      shift and goto 139
    "["           shift and goto 10
    "break"       shift and goto 140
    "continue"    shift and goto 141
    "lambda"      shift and goto 13
    "load"        shift and goto 143
    "not"         shift and goto 14
    "pass"        shift and goto 144
    "return"      shift and goto 15
    "{"           shift and goto 16
    "~"           shift and goto 17

    (<Test> ",")+ goto 3
    AndTest       goto 100
    ArithExpr     goto 101
    AssignStmt    goto 102
    AssignStmt_   goto 103
    BitAndExpr    goto 104
    BitOrExpr     goto 105
    BitXorExpr    goto 106
    CompTest      goto 107
    DictComp      goto 110
    DictComp_     goto 111
    ExprStmt      goto 112
    ExprStmt_     goto 113
    FactorExpr    goto 114
    L<Test>       goto 119
    LambDef       goto 120
    ListComp      goto 121
    ListComp_     goto 122
    LoadStmt      goto 123
    LoadStmtInner goto 124
    LoadStmt_     goto 125
    NotTest       goto 126
    Operand       goto 127
    OrTest        goto 128
    PrimaryExpr   goto 129
    ProductExpr   goto 130
    ShiftExpr     goto 131
    SmallStmt     goto 247
    Test          goto 134
    TestList      goto 6
}

State 60 {

    (<Test> ",")+ -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Test> ",")+ -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest       -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest       -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr     -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr     -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr     -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignStmt_   -> TestList Type AssignOp . TestList
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr    -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr    -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr     -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr     -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr    -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr    -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest      -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp      -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_     -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>       -> . (<Test> ",")+ Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>       -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>       -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>       -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef       -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp      -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_     -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest       -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest       -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest        -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest        -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr     -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr     -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr     -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test          -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test          -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test          -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    TestList      -> . L<Test>
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("           shift and goto 7
    "+"           shift and goto 8
    "-"           shift and goto 9
    "FLOAT"       shift and goto 136
    "IDENTIFIER"  shift and goto 137
    "INTEGER"     shift and goto 138
    "STRING"      shift and goto 139
    "["           shift and goto 10
    "lambda"      shift and goto 13
    "not"         shift and goto 14
    "{"           shift and goto 16
    "~"           shift and goto 17

    (<Test> ",")+ goto 3
    AndTest       goto 100
    ArithExpr     goto 101
    BitAndExpr    goto 104
    BitOrExpr     goto 105
    BitXorExpr    goto 106
    CompTest      goto 107
    DictComp      goto 110
    DictComp_     goto 111
    FactorExpr    goto 114
    L<Test>       goto 119
    LambDef       goto 120
    ListComp      goto 121
    ListComp_     goto 122
    NotTest       goto 126
    Operand       goto 127
    OrTest        goto 128
    PrimaryExpr   goto 129
    ProductExpr   goto 130
    ShiftExpr     goto 131
    Test          goto 153
    TestList      goto 249
}

State 61 {

    Clause     -> . ForClause
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Clause     -> . "if" OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Clause+    -> . Clause
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Clause+    -> . Clause+ Clause
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompClause -> ForClause .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompClause -> ForClause . Clause+
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ForClause  -> . "for" ExprList "in" OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction CompClause -> ForClause
        lookahead "]" "}"

    "for"     shift and goto 62
    "if"      shift and goto 75

    Clause    goto 252
    Clause+   goto 74
    ForClause goto 253
}

State 62 {

    (<Expr> ",")+ -> . (<Expr> ",")+ Expr ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Expr> ",")+ -> . Expr ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr     -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr     -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr     -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr    -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr    -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr     -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr     -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr    -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr    -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp      -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_     -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Expr          -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ExprList      -> . L<Expr>
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr    -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ForClause     -> "for" . ExprList "in" OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Expr>       -> . (<Expr> ",")+ Expr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Expr>       -> . (<Expr> ",")+ Expr ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Expr>       -> . Expr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Expr>       -> . Expr ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp      -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_     -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand       -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr   -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr     -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr     -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr     -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("           shift and goto 7
    "+"           shift and goto 8
    "-"           shift and goto 9
    "FLOAT"       shift and goto 136
    "IDENTIFIER"  shift and goto 137
    "INTEGER"     shift and goto 138
    "STRING"      shift and goto 139
    "["           shift and goto 10
    "{"           shift and goto 16
    "~"           shift and goto 17

    (<Expr> ",")+ goto 48
    ArithExpr     goto 101
    BitAndExpr    goto 104
    BitOrExpr     goto 160
    BitXorExpr    goto 106
    DictComp      goto 110
    DictComp_     goto 111
    Expr          goto 161
    ExprList      goto 254
    FactorExpr    goto 114
    L<Expr>       goto 163
    ListComp      goto 121
    ListComp_     goto 122
    Operand       goto 127
    PrimaryExpr   goto 129
    ProductExpr   goto 130
    ShiftExpr     goto 131
}

State 63 {

    (<ParameterTyped> ",")+ -> . (<ParameterTyped> ",")+ ParameterTyped ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<ParameterTyped> ",")+ -> . ParameterTyped ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignIdent             -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<ParameterTyped>   -> .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<ParameterTyped>   -> . (<ParameterTyped> ",")+
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<ParameterTyped>   -> . (<ParameterTyped> ",")+ ParameterTyped
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<ParameterTyped>   -> . ParameterTyped
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DefStmt_                -> "def" "IDENTIFIER" "(" . COMMA<ParameterTyped> ")" ReturnType ":" Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ParameterTyped          -> . ParameterTyped_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ParameterTyped_         -> . AssignIdent Type
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ParameterTyped_         -> . AssignIdent Type "=" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ParameterTyped_         -> . "*"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ParameterTyped_         -> . "*" AssignIdent Type
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ParameterTyped_         -> . "**" AssignIdent Type
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction COMMA<ParameterTyped> ->
        lookahead ")"

    "*"                     shift and goto 78
    "**"                    shift and goto 79
    "IDENTIFIER"            shift and goto 170

    (<ParameterTyped> ",")+ goto 76
    AssignIdent             goto 77
    COMMA<ParameterTyped>   goto 255
    ParameterTyped          goto 256
    ParameterTyped_         goto 257
}

State 64 {

    AndTest     -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest     -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ForStmt_    -> "for" ExprList "in" . Test ":" Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef     -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "lambda"    shift and goto 13
    "not"       shift and goto 14
    "{"         shift and goto 16
    "~"         shift and goto 17

    AndTest     goto 100
    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 105
    BitXorExpr  goto 106
    CompTest    goto 107
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    LambDef     goto 120
    ListComp    goto 121
    ListComp_   goto 122
    NotTest     goto 126
    Operand     goto 127
    OrTest      goto 128
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
    Test        goto 259
}

State 65 {

    "\n"+                 -> . "\n"+ "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "\n"+                 -> . "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Test> ",")+         -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Test> ",")+         -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest               -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest               -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignStmt            -> . AssignStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignStmt_           -> . TestList Type AssignOp TestList
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr            -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr            -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr             -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr             -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr            -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr            -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp              -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_             -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ExprStmt              -> . ExprStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ExprStmt_             -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    IfBody_               -> Test ":" . Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    IfBody_               -> Test ":" . Suite ElseStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . (<Test> ",")+ Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef               -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp              -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_             -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmt              -> . LoadStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner         -> . "load" "(" "STRING" ("," <LoadStmtSyms>)+ ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner         -> . "load" "(" "STRING" ("," <LoadStmtSyms>)+ "," ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmt_             -> . LoadStmtInner
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest               -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest               -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest                -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest                -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt (";" <SmallStmt>)+ "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt (";" <SmallStmt>)+ ";" "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt ";" "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . AssignStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . ExprStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . LoadStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "break"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "continue"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "pass"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "return"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "return" TestList
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Suite                 -> . "\n"+ "INDENT" "\n"+ (<Stmt> "\n"*)+ "DEDENT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Suite                 -> . "\n"+ "INDENT" (<Stmt> "\n"*)+ "DEDENT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Suite                 -> . SimpleStmt<SmallStmt>
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    TestList              -> . L<Test>
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "\n"                  shift and goto 135
    "("                   shift and goto 7
    "+"                   shift and goto 8
    "-"                   shift and goto 9
    "FLOAT"               shift and goto 136
    "IDENTIFIER"          shift and goto 137
    "INTEGER"             shift and goto 138
    "STRING"              shift and goto 139
    "["                   shift and goto 10
    "break"               shift and goto 140
    "continue"            shift and goto 141
    "lambda"              shift and goto 13
    "load"                shift and goto 143
    "not"                 shift and goto 14
    "pass"                shift and goto 144
    "return"              shift and goto 15
    "{"                   shift and goto 16
    "~"                   shift and goto 17

    "\n"+                 goto 260
    (<Test> ",")+         goto 3
    AndTest               goto 100
    ArithExpr             goto 101
    AssignStmt            goto 102
    AssignStmt_           goto 103
    BitAndExpr            goto 104
    BitOrExpr             goto 105
    BitXorExpr            goto 106
    CompTest              goto 107
    DictComp              goto 110
    DictComp_             goto 111
    ExprStmt              goto 112
    ExprStmt_             goto 113
    FactorExpr            goto 114
    L<Test>               goto 119
    LambDef               goto 120
    ListComp              goto 121
    ListComp_             goto 122
    LoadStmt              goto 123
    LoadStmtInner         goto 124
    LoadStmt_             goto 125
    NotTest               goto 126
    Operand               goto 127
    OrTest                goto 128
    PrimaryExpr           goto 129
    ProductExpr           goto 130
    ShiftExpr             goto 131
    SimpleStmt<SmallStmt> goto 261
    SmallStmt             goto 4
    Suite                 goto 80
    Test                  goto 134
    TestList              goto 6
}

State 66 {

    AndTest     -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest     -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef     -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Parameter_  -> AssignIdent "=" . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "lambda"    shift and goto 13
    "not"       shift and goto 14
    "{"         shift and goto 16
    "~"         shift and goto 17

    AndTest     goto 100
    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 105
    BitXorExpr  goto 106
    CompTest    goto 107
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    LambDef     goto 120
    ListComp    goto 121
    ListComp_   goto 122
    NotTest     goto 126
    Operand     goto 127
    OrTest      goto 128
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
    Test        goto 263
}

State 67 {

    AndTest     -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest     -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef     -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef     -> "lambda" COMMA<Parameter> ":" . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "lambda"    shift and goto 13
    "not"       shift and goto 14
    "{"         shift and goto 16
    "~"         shift and goto 17

    AndTest     goto 100
    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 105
    BitXorExpr  goto 106
    CompTest    goto 107
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    LambDef     goto 120
    ListComp    goto 121
    ListComp_   goto 122
    NotTest     goto 126
    Operand     goto 127
    OrTest      goto 128
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
    Test        goto 264
}

State 68 {

    ("," <LoadStmtSyms>)+ -> . ("," <LoadStmtSyms>)+ "," LoadStmtSyms
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ("," <LoadStmtSyms>)+ -> . "," LoadStmtSyms
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner         -> "load" "(" "STRING" . ("," <LoadStmtSyms>)+ ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner         -> "load" "(" "STRING" . ("," <LoadStmtSyms>)+ "," ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ","                   shift and goto 81

    ("," <LoadStmtSyms>)+ goto 265
}

State 69 {

    AndTest     -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest     -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictEntry   -> Test ":" . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef     -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "lambda"    shift and goto 13
    "not"       shift and goto 14
    "{"         shift and goto 16
    "~"         shift and goto 17

    AndTest     goto 100
    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 105
    BitXorExpr  goto 106
    CompTest    goto 107
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    LambDef     goto 120
    ListComp    goto 121
    ListComp_   goto 122
    NotTest     goto 126
    Operand     goto 127
    OrTest      goto 128
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
    Test        goto 268
}

State 70 {

    AndTest     -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest     -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef     -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> OrTest "if" OrTest "else" . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "lambda"    shift and goto 13
    "not"       shift and goto 14
    "{"         shift and goto 16
    "~"         shift and goto 17

    AndTest     goto 100
    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 105
    BitXorExpr  goto 106
    CompTest    goto 107
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    LambDef     goto 120
    ListComp    goto 121
    ListComp_   goto 122
    NotTest     goto 126
    Operand     goto 127
    OrTest      goto 128
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
    Test        goto 269
}

State 71 {

    AndTest     -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest     -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Argument_   -> "IDENTIFIER" "=" . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef     -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "lambda"    shift and goto 13
    "not"       shift and goto 14
    "{"         shift and goto 16
    "~"         shift and goto 17

    AndTest     goto 100
    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 105
    BitXorExpr  goto 106
    CompTest    goto 107
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    LambDef     goto 120
    ListComp    goto 121
    ListComp_   goto 122
    NotTest     goto 126
    Operand     goto 127
    OrTest      goto 128
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
    Test        goto 271
}

State 72 {

    AndTest     -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest     -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef     -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr "[" Test ":" . Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr "[" Test ":" . Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr "[" Test ":" . Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr "[" Test ":" . ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr "[" Test ":" . ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr "[" Test ":" . "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    ":"         shift and goto 82
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "]"         shift and goto 273
    "lambda"    shift and goto 13
    "not"       shift and goto 14
    "{"         shift and goto 16
    "~"         shift and goto 17

    AndTest     goto 100
    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 105
    BitXorExpr  goto 106
    CompTest    goto 107
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    LambDef     goto 120
    ListComp    goto 121
    ListComp_   goto 122
    NotTest     goto 126
    Operand     goto 127
    OrTest      goto 128
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
    Test        goto 272
}

State 73 {

    AndTest     -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest     -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef     -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr "[" ":" ":" . Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr "[" ":" ":" . "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "]"         shift and goto 276
    "lambda"    shift and goto 13
    "not"       shift and goto 14
    "{"         shift and goto 16
    "~"         shift and goto 17

    AndTest     goto 100
    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 105
    BitXorExpr  goto 106
    CompTest    goto 107
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    LambDef     goto 120
    ListComp    goto 121
    ListComp_   goto 122
    NotTest     goto 126
    Operand     goto 127
    OrTest      goto 128
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
    Test        goto 275
}

State 74 {

    Clause     -> . ForClause
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Clause     -> . "if" OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Clause+    -> Clause+ . Clause
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompClause -> ForClause Clause+ .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ForClause  -> . "for" ExprList "in" OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction CompClause -> ForClause Clause+
        lookahead "]" "}"

    "for"     shift and goto 62
    "if"      shift and goto 75

    Clause    goto 277
    ForClause goto 253
}

State 75 {

    AndTest     -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest     -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Clause      -> "if" . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "not"       shift and goto 14
    "{"         shift and goto 16
    "~"         shift and goto 17

    AndTest     goto 100
    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 105
    BitXorExpr  goto 106
    CompTest    goto 107
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    ListComp    goto 121
    ListComp_   goto 122
    NotTest     goto 126
    Operand     goto 127
    OrTest      goto 278
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
}

State 76 {

    (<ParameterTyped> ",")+ -> (<ParameterTyped> ",")+ . ParameterTyped ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignIdent             -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<ParameterTyped>   -> (<ParameterTyped> ",")+ .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<ParameterTyped>   -> (<ParameterTyped> ",")+ . ParameterTyped
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ParameterTyped          -> . ParameterTyped_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ParameterTyped_         -> . AssignIdent Type
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ParameterTyped_         -> . AssignIdent Type "=" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ParameterTyped_         -> . "*"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ParameterTyped_         -> . "*" AssignIdent Type
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ParameterTyped_         -> . "**" AssignIdent Type
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction COMMA<ParameterTyped> -> (<ParameterTyped> ",")+
        lookahead ")"

    "*"             shift and goto 78
    "**"            shift and goto 79
    "IDENTIFIER"    shift and goto 170

    AssignIdent     goto 77
    ParameterTyped  goto 279
    ParameterTyped_ goto 257
}

State 77 {

    ParameterTyped_ -> AssignIdent . Type
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ParameterTyped_ -> AssignIdent . Type "=" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Type            -> .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Type            -> . ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Type ->
        lookahead ")" "," "="

    ":"  shift and goto 45

    Type goto 280
}

State 78 {

    AssignIdent     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ParameterTyped_ -> "*" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ParameterTyped_ -> "*" . AssignIdent Type
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction ParameterTyped_ -> "*"
        lookahead ")" ","

    "IDENTIFIER" shift and goto 170

    AssignIdent goto 86
}

State 79 {

    AssignIdent     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ParameterTyped_ -> "**" . AssignIdent Type
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "IDENTIFIER" shift and goto 170

    AssignIdent goto 87
}

State 80 {

    ElseStmt -> . "elif" IfBody
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ElseStmt -> . "else" ":" Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    IfBody_  -> Test ":" Suite .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    IfBody_  -> Test ":" Suite . ElseStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction IfBody_ -> Test ":" Suite
        lookahead "\n" "(" "+" "-" "DEDENT" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "break" "continue" "def" "for" "if" "lambda" "load" "not" "pass" "return" "{" "~" EOF

    "elif"   shift and goto 90
    "else"   shift and goto 283

    ElseStmt goto 282
}

State 81 {

    ("," <LoadStmtSyms>)+ -> "," . LoadStmtSyms
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtBindingName   -> . "IDENTIFIER" "="
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtSyms          -> . LoadStmtBindingName "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtSyms          -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "IDENTIFIER"        shift and goto 287
    "STRING"            shift and goto 288

    LoadStmtBindingName goto 285
    LoadStmtSyms        goto 286
}

State 82 {

    AndTest     -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest     -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef     -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr "[" Test ":" ":" . Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr "[" Test ":" ":" . "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "]"         shift and goto 291
    "lambda"    shift and goto 13
    "not"       shift and goto 14
    "{"         shift and goto 16
    "~"         shift and goto 17

    AndTest     goto 100
    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 105
    BitXorExpr  goto 106
    CompTest    goto 107
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    LambDef     goto 120
    ListComp    goto 121
    ListComp_   goto 122
    NotTest     goto 126
    Operand     goto 127
    OrTest      goto 128
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
    Test        goto 290
}

State 83 {

    AndTest     -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest     -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef     -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr "[" ":" Test ":" . Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr "[" ":" Test ":" . "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "]"         shift and goto 293
    "lambda"    shift and goto 13
    "not"       shift and goto 14
    "{"         shift and goto 16
    "~"         shift and goto 17

    AndTest     goto 100
    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 105
    BitXorExpr  goto 106
    CompTest    goto 107
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    LambDef     goto 120
    ListComp    goto 121
    ListComp_   goto 122
    NotTest     goto 126
    Operand     goto 127
    OrTest      goto 128
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
    Test        goto 292
}

State 84 {

    AndTest     -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest     -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ForClause   -> "for" ExprList "in" . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "not"       shift and goto 14
    "{"         shift and goto 16
    "~"         shift and goto 17

    AndTest     goto 100
    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 105
    BitXorExpr  goto 106
    CompTest    goto 107
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    ListComp    goto 121
    ListComp_   goto 122
    NotTest     goto 126
    Operand     goto 127
    OrTest      goto 295
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
}

State 85 {

    DefStmt_   -> "def" "IDENTIFIER" "(" COMMA<ParameterTyped> ")" . ReturnType ":" Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ReturnType -> .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ReturnType -> . "->" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction ReturnType ->
        lookahead ":"

    "->"       shift and goto 94

    ReturnType goto 297
}

State 86 {

    ParameterTyped_ -> "*" AssignIdent . Type
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Type            -> .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Type            -> . ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Type ->
        lookahead ")" ","

    ":"  shift and goto 45

    Type goto 298
}

State 87 {

    ParameterTyped_ -> "**" AssignIdent . Type
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Type            -> .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Type            -> . ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Type ->
        lookahead ")" ","

    ":"  shift and goto 45

    Type goto 299
}

State 88 {

    "\n"+                 -> . "\n"+ "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "\n"+                 -> . "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Test> ",")+         -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Test> ",")+         -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest               -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest               -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignStmt            -> . AssignStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignStmt_           -> . TestList Type AssignOp TestList
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr            -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr            -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr             -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr             -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr            -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr            -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp              -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_             -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ExprStmt              -> . ExprStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ExprStmt_             -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ForStmt_              -> "for" ExprList "in" Test ":" . Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . (<Test> ",")+ Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef               -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp              -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_             -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmt              -> . LoadStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner         -> . "load" "(" "STRING" ("," <LoadStmtSyms>)+ ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner         -> . "load" "(" "STRING" ("," <LoadStmtSyms>)+ "," ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmt_             -> . LoadStmtInner
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest               -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest               -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest                -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest                -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt (";" <SmallStmt>)+ "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt (";" <SmallStmt>)+ ";" "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt ";" "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . AssignStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . ExprStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . LoadStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "break"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "continue"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "pass"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "return"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "return" TestList
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Suite                 -> . "\n"+ "INDENT" "\n"+ (<Stmt> "\n"*)+ "DEDENT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Suite                 -> . "\n"+ "INDENT" (<Stmt> "\n"*)+ "DEDENT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Suite                 -> . SimpleStmt<SmallStmt>
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    TestList              -> . L<Test>
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "\n"                  shift and goto 135
    "("                   shift and goto 7
    "+"                   shift and goto 8
    "-"                   shift and goto 9
    "FLOAT"               shift and goto 136
    "IDENTIFIER"          shift and goto 137
    "INTEGER"             shift and goto 138
    "STRING"              shift and goto 139
    "["                   shift and goto 10
    "break"               shift and goto 140
    "continue"            shift and goto 141
    "lambda"              shift and goto 13
    "load"                shift and goto 143
    "not"                 shift and goto 14
    "pass"                shift and goto 144
    "return"              shift and goto 15
    "{"                   shift and goto 16
    "~"                   shift and goto 17

    "\n"+                 goto 260
    (<Test> ",")+         goto 3
    AndTest               goto 100
    ArithExpr             goto 101
    AssignStmt            goto 102
    AssignStmt_           goto 103
    BitAndExpr            goto 104
    BitOrExpr             goto 105
    BitXorExpr            goto 106
    CompTest              goto 107
    DictComp              goto 110
    DictComp_             goto 111
    ExprStmt              goto 112
    ExprStmt_             goto 113
    FactorExpr            goto 114
    L<Test>               goto 119
    LambDef               goto 120
    ListComp              goto 121
    ListComp_             goto 122
    LoadStmt              goto 123
    LoadStmtInner         goto 124
    LoadStmt_             goto 125
    NotTest               goto 126
    Operand               goto 127
    OrTest                goto 128
    PrimaryExpr           goto 129
    ProductExpr           goto 130
    ShiftExpr             goto 131
    SimpleStmt<SmallStmt> goto 261
    SmallStmt             goto 4
    Suite                 goto 300
    Test                  goto 134
    TestList              goto 6
}

State 89 {

    "\n"+                 -> . "\n"+ "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "\n"+                 -> . "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Stmt> "\n"*)+       -> . (<Stmt> "\n"*)+ Stmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Stmt> "\n"*)+       -> . (<Stmt> "\n"*)+ Stmt "\n"+
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Stmt> "\n"*)+       -> . Stmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Stmt> "\n"*)+       -> . Stmt "\n"+
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Test> ",")+         -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Test> ",")+         -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest               -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest               -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignStmt            -> . AssignStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignStmt_           -> . TestList Type AssignOp TestList
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr            -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr            -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr             -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr             -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr            -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr            -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DefStmt               -> . DefStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DefStmt_              -> . "def" "IDENTIFIER" "(" COMMA<ParameterTyped> ")" ReturnType ":" Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp              -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_             -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ExprStmt              -> . ExprStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ExprStmt_             -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ForStmt               -> . ForStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ForStmt_              -> . "for" ExprList "in" Test ":" Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    IfStmt                -> . IfStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    IfStmt_               -> . "if" IfBody_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . (<Test> ",")+ Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef               -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp              -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_             -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmt              -> . LoadStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner         -> . "load" "(" "STRING" ("," <LoadStmtSyms>)+ ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner         -> . "load" "(" "STRING" ("," <LoadStmtSyms>)+ "," ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmt_             -> . LoadStmtInner
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest               -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest               -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest                -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest                -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt (";" <SmallStmt>)+ "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt (";" <SmallStmt>)+ ";" "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt ";" "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . AssignStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . ExprStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . LoadStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "break"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "continue"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "pass"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "return"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "return" TestList
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Stmt                  -> . DefStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Stmt                  -> . ForStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Stmt                  -> . IfStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Stmt                  -> . SimpleStmt<SmallStmt>
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Suite                 -> "\n"+ "INDENT" . "\n"+ (<Stmt> "\n"*)+ "DEDENT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Suite                 -> "\n"+ "INDENT" . (<Stmt> "\n"*)+ "DEDENT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    TestList              -> . L<Test>
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "\n"                  shift and goto 135
    "("                   shift and goto 7
    "+"                   shift and goto 8
    "-"                   shift and goto 9
    "FLOAT"               shift and goto 136
    "IDENTIFIER"          shift and goto 137
    "INTEGER"             shift and goto 138
    "STRING"              shift and goto 139
    "["                   shift and goto 10
    "break"               shift and goto 140
    "continue"            shift and goto 141
    "def"                 shift and goto 142
    "for"                 shift and goto 11
    "if"                  shift and goto 12
    "lambda"              shift and goto 13
    "load"                shift and goto 143
    "not"                 shift and goto 14
    "pass"                shift and goto 144
    "return"              shift and goto 15
    "{"                   shift and goto 16
    "~"                   shift and goto 17

    "\n"+                 goto 95
    (<Stmt> "\n"*)+       goto 96
    (<Test> ",")+         goto 3
    AndTest               goto 100
    ArithExpr             goto 101
    AssignStmt            goto 102
    AssignStmt_           goto 103
    BitAndExpr            goto 104
    BitOrExpr             goto 105
    BitXorExpr            goto 106
    CompTest              goto 107
    DefStmt               goto 108
    DefStmt_              goto 109
    DictComp              goto 110
    DictComp_             goto 111
    ExprStmt              goto 112
    ExprStmt_             goto 113
    FactorExpr            goto 114
    ForStmt               goto 115
    ForStmt_              goto 116
    IfStmt                goto 117
    IfStmt_               goto 118
    L<Test>               goto 119
    LambDef               goto 120
    ListComp              goto 121
    ListComp_             goto 122
    LoadStmt              goto 123
    LoadStmtInner         goto 124
    LoadStmt_             goto 125
    NotTest               goto 126
    Operand               goto 127
    OrTest                goto 128
    PrimaryExpr           goto 129
    ProductExpr           goto 130
    ShiftExpr             goto 131
    SimpleStmt<SmallStmt> goto 132
    SmallStmt             goto 4
    Stmt                  goto 5
    Test                  goto 134
    TestList              goto 6
}

State 90 {

    AndTest     -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest     -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ElseStmt    -> "elif" . IfBody
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    IfBody      -> . IfBody_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    IfBody_     -> . Test ":" Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    IfBody_     -> . Test ":" Suite ElseStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef     -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "lambda"    shift and goto 13
    "not"       shift and goto 14
    "{"         shift and goto 16
    "~"         shift and goto 17

    AndTest     goto 100
    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 105
    BitXorExpr  goto 106
    CompTest    goto 107
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    IfBody      goto 301
    IfBody_     goto 302
    LambDef     goto 120
    ListComp    goto 121
    ListComp_   goto 122
    NotTest     goto 126
    Operand     goto 127
    OrTest      goto 128
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
    Test        goto 165
}

State 91 {

    ("," <LoadStmtSyms>)+ -> ("," <LoadStmtSyms>)+ "," . LoadStmtSyms
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtBindingName   -> . "IDENTIFIER" "="
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner         -> "load" "(" "STRING" ("," <LoadStmtSyms>)+ "," . ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtSyms          -> . LoadStmtBindingName "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtSyms          -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ")"                 shift and goto 304
    "IDENTIFIER"        shift and goto 287
    "STRING"            shift and goto 288

    LoadStmtBindingName goto 285
    LoadStmtSyms        goto 303
}

State 92 {

    AndTest     -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest     -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef     -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr "[" Test ":" Test ":" . Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr "[" Test ":" Test ":" . "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "]"         shift and goto 308
    "lambda"    shift and goto 13
    "not"       shift and goto 14
    "{"         shift and goto 16
    "~"         shift and goto 17

    AndTest     goto 100
    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 105
    BitXorExpr  goto 106
    CompTest    goto 107
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    LambDef     goto 120
    ListComp    goto 121
    ListComp_   goto 122
    NotTest     goto 126
    Operand     goto 127
    OrTest      goto 128
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
    Test        goto 307
}

State 93 {

    AndTest         -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest         -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr       -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr       -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr       -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr      -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr      -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr       -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr       -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr      -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr      -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest        -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest        -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest        -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest        -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest        -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest        -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest        -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest        -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest        -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp        -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_       -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr      -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr      -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr      -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr      -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef         -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp        -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_       -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest         -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest         -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand         -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand         -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand         -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand         -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand         -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand         -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand         -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand         -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand         -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand         -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest          -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest          -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ParameterTyped_ -> AssignIdent Type "=" . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr     -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr     -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr     -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr     -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr     -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr     -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr     -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr     -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr     -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr     -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr     -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr     -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr     -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr     -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr     -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr     -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr     -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr     -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr     -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr     -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr     -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr       -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr       -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr       -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test            -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test            -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test            -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "lambda"    shift and goto 13
    "not"       shift and goto 14
    "{"         shift and goto 16
    "~"         shift and goto 17

    AndTest     goto 100
    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 105
    BitXorExpr  goto 106
    CompTest    goto 107
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    LambDef     goto 120
    ListComp    goto 121
    ListComp_   goto 122
    NotTest     goto 126
    Operand     goto 127
    OrTest      goto 128
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
    Test        goto 311
}

State 94 {

    AndTest     -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest     -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr   -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr  -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr   -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr  -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest    -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp    -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_   -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr  -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef     -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp    -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_   -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest     -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand     -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest      -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ReturnType  -> "->" . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr   -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test        -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("         shift and goto 7
    "+"         shift and goto 8
    "-"         shift and goto 9
    "FLOAT"     shift and goto 136
    "IDENTIFIER" shift and goto 137
    "INTEGER"   shift and goto 138
    "STRING"    shift and goto 139
    "["         shift and goto 10
    "lambda"    shift and goto 13
    "not"       shift and goto 14
    "{"         shift and goto 16
    "~"         shift and goto 17

    AndTest     goto 100
    ArithExpr   goto 101
    BitAndExpr  goto 104
    BitOrExpr   goto 105
    BitXorExpr  goto 106
    CompTest    goto 107
    DictComp    goto 110
    DictComp_   goto 111
    FactorExpr  goto 114
    LambDef     goto 120
    ListComp    goto 121
    ListComp_   goto 122
    NotTest     goto 126
    Operand     goto 127
    OrTest      goto 128
    PrimaryExpr goto 129
    ProductExpr goto 130
    ShiftExpr   goto 131
    Test        goto 312
}

State 95 {

    "\n"+                 -> "\n"+ . "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Stmt> "\n"*)+       -> . (<Stmt> "\n"*)+ Stmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Stmt> "\n"*)+       -> . (<Stmt> "\n"*)+ Stmt "\n"+
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Stmt> "\n"*)+       -> . Stmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Stmt> "\n"*)+       -> . Stmt "\n"+
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Test> ",")+         -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Test> ",")+         -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest               -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest               -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignStmt            -> . AssignStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignStmt_           -> . TestList Type AssignOp TestList
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr            -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr            -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr             -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr             -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr            -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr            -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DefStmt               -> . DefStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DefStmt_              -> . "def" "IDENTIFIER" "(" COMMA<ParameterTyped> ")" ReturnType ":" Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp              -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_             -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ExprStmt              -> . ExprStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ExprStmt_             -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ForStmt               -> . ForStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ForStmt_              -> . "for" ExprList "in" Test ":" Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    IfStmt                -> . IfStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    IfStmt_               -> . "if" IfBody_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . (<Test> ",")+ Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef               -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp              -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_             -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmt              -> . LoadStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner         -> . "load" "(" "STRING" ("," <LoadStmtSyms>)+ ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner         -> . "load" "(" "STRING" ("," <LoadStmtSyms>)+ "," ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmt_             -> . LoadStmtInner
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest               -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest               -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest                -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest                -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt (";" <SmallStmt>)+ "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt (";" <SmallStmt>)+ ";" "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt ";" "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . AssignStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . ExprStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . LoadStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "break"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "continue"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "pass"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "return"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "return" TestList
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Stmt                  -> . DefStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Stmt                  -> . ForStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Stmt                  -> . IfStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Stmt                  -> . SimpleStmt<SmallStmt>
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Suite                 -> "\n"+ "INDENT" "\n"+ . (<Stmt> "\n"*)+ "DEDENT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    TestList              -> . L<Test>
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "\n"                  shift and goto 145
    "("                   shift and goto 7
    "+"                   shift and goto 8
    "-"                   shift and goto 9
    "FLOAT"               shift and goto 136
    "IDENTIFIER"          shift and goto 137
    "INTEGER"             shift and goto 138
    "STRING"              shift and goto 139
    "["                   shift and goto 10
    "break"               shift and goto 140
    "continue"            shift and goto 141
    "def"                 shift and goto 142
    "for"                 shift and goto 11
    "if"                  shift and goto 12
    "lambda"              shift and goto 13
    "load"                shift and goto 143
    "not"                 shift and goto 14
    "pass"                shift and goto 144
    "return"              shift and goto 15
    "{"                   shift and goto 16
    "~"                   shift and goto 17

    (<Stmt> "\n"*)+       goto 99
    (<Test> ",")+         goto 3
    AndTest               goto 100
    ArithExpr             goto 101
    AssignStmt            goto 102
    AssignStmt_           goto 103
    BitAndExpr            goto 104
    BitOrExpr             goto 105
    BitXorExpr            goto 106
    CompTest              goto 107
    DefStmt               goto 108
    DefStmt_              goto 109
    DictComp              goto 110
    DictComp_             goto 111
    ExprStmt              goto 112
    ExprStmt_             goto 113
    FactorExpr            goto 114
    ForStmt               goto 115
    ForStmt_              goto 116
    IfStmt                goto 117
    IfStmt_               goto 118
    L<Test>               goto 119
    LambDef               goto 120
    ListComp              goto 121
    ListComp_             goto 122
    LoadStmt              goto 123
    LoadStmtInner         goto 124
    LoadStmt_             goto 125
    NotTest               goto 126
    Operand               goto 127
    OrTest                goto 128
    PrimaryExpr           goto 129
    ProductExpr           goto 130
    ShiftExpr             goto 131
    SimpleStmt<SmallStmt> goto 132
    SmallStmt             goto 4
    Stmt                  goto 5
    Test                  goto 134
    TestList              goto 6
}

State 96 {

    (<Stmt> "\n"*)+       -> (<Stmt> "\n"*)+ . Stmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Stmt> "\n"*)+       -> (<Stmt> "\n"*)+ . Stmt "\n"+
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Test> ",")+         -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Test> ",")+         -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest               -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest               -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignStmt            -> . AssignStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignStmt_           -> . TestList Type AssignOp TestList
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr            -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr            -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr             -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr             -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr            -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr            -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DefStmt               -> . DefStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DefStmt_              -> . "def" "IDENTIFIER" "(" COMMA<ParameterTyped> ")" ReturnType ":" Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp              -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_             -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ExprStmt              -> . ExprStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ExprStmt_             -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ForStmt               -> . ForStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ForStmt_              -> . "for" ExprList "in" Test ":" Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    IfStmt                -> . IfStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    IfStmt_               -> . "if" IfBody_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . (<Test> ",")+ Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef               -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp              -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_             -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmt              -> . LoadStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner         -> . "load" "(" "STRING" ("," <LoadStmtSyms>)+ ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner         -> . "load" "(" "STRING" ("," <LoadStmtSyms>)+ "," ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmt_             -> . LoadStmtInner
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest               -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest               -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest                -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest                -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt (";" <SmallStmt>)+ "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt (";" <SmallStmt>)+ ";" "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt ";" "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . AssignStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . ExprStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . LoadStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "break"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "continue"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "pass"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "return"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "return" TestList
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Stmt                  -> . DefStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Stmt                  -> . ForStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Stmt                  -> . IfStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Stmt                  -> . SimpleStmt<SmallStmt>
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Suite                 -> "\n"+ "INDENT" (<Stmt> "\n"*)+ . "DEDENT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    TestList              -> . L<Test>
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("                   shift and goto 7
    "+"                   shift and goto 8
    "-"                   shift and goto 9
    "DEDENT"              shift and goto 313
    "FLOAT"               shift and goto 136
    "IDENTIFIER"          shift and goto 137
    "INTEGER"             shift and goto 138
    "STRING"              shift and goto 139
    "["                   shift and goto 10
    "break"               shift and goto 140
    "continue"            shift and goto 141
    "def"                 shift and goto 142
    "for"                 shift and goto 11
    "if"                  shift and goto 12
    "lambda"              shift and goto 13
    "load"                shift and goto 143
    "not"                 shift and goto 14
    "pass"                shift and goto 144
    "return"              shift and goto 15
    "{"                   shift and goto 16
    "~"                   shift and goto 17

    (<Test> ",")+         goto 3
    AndTest               goto 100
    ArithExpr             goto 101
    AssignStmt            goto 102
    AssignStmt_           goto 103
    BitAndExpr            goto 104
    BitOrExpr             goto 105
    BitXorExpr            goto 106
    CompTest              goto 107
    DefStmt               goto 108
    DefStmt_              goto 109
    DictComp              goto 110
    DictComp_             goto 111
    ExprStmt              goto 112
    ExprStmt_             goto 113
    FactorExpr            goto 114
    ForStmt               goto 115
    ForStmt_              goto 116
    IfStmt                goto 117
    IfStmt_               goto 118
    L<Test>               goto 119
    LambDef               goto 120
    ListComp              goto 121
    ListComp_             goto 122
    LoadStmt              goto 123
    LoadStmtInner         goto 124
    LoadStmt_             goto 125
    NotTest               goto 126
    Operand               goto 127
    OrTest                goto 128
    PrimaryExpr           goto 129
    ProductExpr           goto 130
    ShiftExpr             goto 131
    SimpleStmt<SmallStmt> goto 132
    SmallStmt             goto 4
    Stmt                  goto 19
    Test                  goto 134
    TestList              goto 6
}

State 97 {

    "\n"+                 -> . "\n"+ "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "\n"+                 -> . "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Test> ",")+         -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Test> ",")+         -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest               -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest               -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignStmt            -> . AssignStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignStmt_           -> . TestList Type AssignOp TestList
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr            -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr            -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr             -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr             -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr            -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr            -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp              -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_             -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ElseStmt              -> "else" ":" . Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ExprStmt              -> . ExprStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ExprStmt_             -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . (<Test> ",")+ Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef               -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp              -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_             -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmt              -> . LoadStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner         -> . "load" "(" "STRING" ("," <LoadStmtSyms>)+ ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner         -> . "load" "(" "STRING" ("," <LoadStmtSyms>)+ "," ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmt_             -> . LoadStmtInner
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest               -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest               -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest                -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest                -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt (";" <SmallStmt>)+ "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt (";" <SmallStmt>)+ ";" "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt ";" "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . AssignStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . ExprStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . LoadStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "break"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "continue"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "pass"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "return"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "return" TestList
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Suite                 -> . "\n"+ "INDENT" "\n"+ (<Stmt> "\n"*)+ "DEDENT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Suite                 -> . "\n"+ "INDENT" (<Stmt> "\n"*)+ "DEDENT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Suite                 -> . SimpleStmt<SmallStmt>
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    TestList              -> . L<Test>
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "\n"                  shift and goto 135
    "("                   shift and goto 7
    "+"                   shift and goto 8
    "-"                   shift and goto 9
    "FLOAT"               shift and goto 136
    "IDENTIFIER"          shift and goto 137
    "INTEGER"             shift and goto 138
    "STRING"              shift and goto 139
    "["                   shift and goto 10
    "break"               shift and goto 140
    "continue"            shift and goto 141
    "lambda"              shift and goto 13
    "load"                shift and goto 143
    "not"                 shift and goto 14
    "pass"                shift and goto 144
    "return"              shift and goto 15
    "{"                   shift and goto 16
    "~"                   shift and goto 17

    "\n"+                 goto 260
    (<Test> ",")+         goto 3
    AndTest               goto 100
    ArithExpr             goto 101
    AssignStmt            goto 102
    AssignStmt_           goto 103
    BitAndExpr            goto 104
    BitOrExpr             goto 105
    BitXorExpr            goto 106
    CompTest              goto 107
    DictComp              goto 110
    DictComp_             goto 111
    ExprStmt              goto 112
    ExprStmt_             goto 113
    FactorExpr            goto 114
    L<Test>               goto 119
    LambDef               goto 120
    ListComp              goto 121
    ListComp_             goto 122
    LoadStmt              goto 123
    LoadStmtInner         goto 124
    LoadStmt_             goto 125
    NotTest               goto 126
    Operand               goto 127
    OrTest                goto 128
    PrimaryExpr           goto 129
    ProductExpr           goto 130
    ShiftExpr             goto 131
    SimpleStmt<SmallStmt> goto 261
    SmallStmt             goto 4
    Suite                 goto 314
    Test                  goto 134
    TestList              goto 6
}

State 98 {

    "\n"+                 -> . "\n"+ "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "\n"+                 -> . "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Test> ",")+         -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Test> ",")+         -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest               -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest               -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignStmt            -> . AssignStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignStmt_           -> . TestList Type AssignOp TestList
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr            -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr            -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr             -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr             -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr            -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr            -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DefStmt_              -> "def" "IDENTIFIER" "(" COMMA<ParameterTyped> ")" ReturnType ":" . Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp              -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_             -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ExprStmt              -> . ExprStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ExprStmt_             -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . (<Test> ",")+ Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef               -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp              -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_             -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmt              -> . LoadStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner         -> . "load" "(" "STRING" ("," <LoadStmtSyms>)+ ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner         -> . "load" "(" "STRING" ("," <LoadStmtSyms>)+ "," ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmt_             -> . LoadStmtInner
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest               -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest               -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest                -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest                -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt (";" <SmallStmt>)+ "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt (";" <SmallStmt>)+ ";" "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt ";" "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . AssignStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . ExprStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . LoadStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "break"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "continue"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "pass"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "return"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "return" TestList
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Suite                 -> . "\n"+ "INDENT" "\n"+ (<Stmt> "\n"*)+ "DEDENT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Suite                 -> . "\n"+ "INDENT" (<Stmt> "\n"*)+ "DEDENT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Suite                 -> . SimpleStmt<SmallStmt>
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    TestList              -> . L<Test>
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "\n"                  shift and goto 135
    "("                   shift and goto 7
    "+"                   shift and goto 8
    "-"                   shift and goto 9
    "FLOAT"               shift and goto 136
    "IDENTIFIER"          shift and goto 137
    "INTEGER"             shift and goto 138
    "STRING"              shift and goto 139
    "["                   shift and goto 10
    "break"               shift and goto 140
    "continue"            shift and goto 141
    "lambda"              shift and goto 13
    "load"                shift and goto 143
    "not"                 shift and goto 14
    "pass"                shift and goto 144
    "return"              shift and goto 15
    "{"                   shift and goto 16
    "~"                   shift and goto 17

    "\n"+                 goto 260
    (<Test> ",")+         goto 3
    AndTest               goto 100
    ArithExpr             goto 101
    AssignStmt            goto 102
    AssignStmt_           goto 103
    BitAndExpr            goto 104
    BitOrExpr             goto 105
    BitXorExpr            goto 106
    CompTest              goto 107
    DictComp              goto 110
    DictComp_             goto 111
    ExprStmt              goto 112
    ExprStmt_             goto 113
    FactorExpr            goto 114
    L<Test>               goto 119
    LambDef               goto 120
    ListComp              goto 121
    ListComp_             goto 122
    LoadStmt              goto 123
    LoadStmtInner         goto 124
    LoadStmt_             goto 125
    NotTest               goto 126
    Operand               goto 127
    OrTest                goto 128
    PrimaryExpr           goto 129
    ProductExpr           goto 130
    ShiftExpr             goto 131
    SimpleStmt<SmallStmt> goto 261
    SmallStmt             goto 4
    Suite                 goto 316
    Test                  goto 134
    TestList              goto 6
}

State 99 {

    (<Stmt> "\n"*)+       -> (<Stmt> "\n"*)+ . Stmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Stmt> "\n"*)+       -> (<Stmt> "\n"*)+ . Stmt "\n"+
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Test> ",")+         -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Test> ",")+         -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest               -> . AndTest "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AndTest               -> . NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr             -> . ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignStmt            -> . AssignStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    AssignStmt_           -> . TestList Type AssignOp TestList
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr            -> . BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitAndExpr            -> . ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr             -> . BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitOrExpr             -> . BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr            -> . BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr            -> . BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest              -> . BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DefStmt               -> . DefStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DefStmt_              -> . "def" "IDENTIFIER" "(" COMMA<ParameterTyped> ")" ReturnType ":" Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp              -> . DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    DictComp_             -> . "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ExprStmt              -> . ExprStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ExprStmt_             -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    FactorExpr            -> . "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ForStmt               -> . ForStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ForStmt_              -> . "for" ExprList "in" Test ":" Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    IfStmt                -> . IfStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    IfStmt_               -> . "if" IfBody_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . (<Test> ",")+ Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . (<Test> ",")+ Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>               -> . Test ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LambDef               -> . "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp              -> . ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ListComp_             -> . "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmt              -> . LoadStmt_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner         -> . "load" "(" "STRING" ("," <LoadStmtSyms>)+ ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner         -> . "load" "(" "STRING" ("," <LoadStmtSyms>)+ "," ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmt_             -> . LoadStmtInner
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest               -> . CompTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    NotTest               -> . "not" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand               -> . "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest                -> . AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest                -> . OrTest "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr           -> . PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr           -> . ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr             -> . ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt (";" <SmallStmt>)+ "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt (";" <SmallStmt>)+ ";" "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> . SmallStmt ";" "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . AssignStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . ExprStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . LoadStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "break"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "continue"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "pass"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "return"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SmallStmt             -> . "return" TestList
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Stmt                  -> . DefStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Stmt                  -> . ForStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Stmt                  -> . IfStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Stmt                  -> . SimpleStmt<SmallStmt>
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Suite                 -> "\n"+ "INDENT" "\n"+ (<Stmt> "\n"*)+ . "DEDENT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . LambDef
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test                  -> . OrTest "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    TestList              -> . L<Test>
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "("                   shift and goto 7
    "+"                   shift and goto 8
    "-"                   shift and goto 9
    "DEDENT"              shift and goto 317
    "FLOAT"               shift and goto 136
    "IDENTIFIER"          shift and goto 137
    "INTEGER"             shift and goto 138
    "STRING"              shift and goto 139
    "["                   shift and goto 10
    "break"               shift and goto 140
    "continue"            shift and goto 141
    "def"                 shift and goto 142
    "for"                 shift and goto 11
    "if"                  shift and goto 12
    "lambda"              shift and goto 13
    "load"                shift and goto 143
    "not"                 shift and goto 14
    "pass"                shift and goto 144
    "return"              shift and goto 15
    "{"                   shift and goto 16
    "~"                   shift and goto 17

    (<Test> ",")+         goto 3
    AndTest               goto 100
    ArithExpr             goto 101
    AssignStmt            goto 102
    AssignStmt_           goto 103
    BitAndExpr            goto 104
    BitOrExpr             goto 105
    BitXorExpr            goto 106
    CompTest              goto 107
    DefStmt               goto 108
    DefStmt_              goto 109
    DictComp              goto 110
    DictComp_             goto 111
    ExprStmt              goto 112
    ExprStmt_             goto 113
    FactorExpr            goto 114
    ForStmt               goto 115
    ForStmt_              goto 116
    IfStmt                goto 117
    IfStmt_               goto 118
    L<Test>               goto 119
    LambDef               goto 120
    ListComp              goto 121
    ListComp_             goto 122
    LoadStmt              goto 123
    LoadStmtInner         goto 124
    LoadStmt_             goto 125
    NotTest               goto 126
    Operand               goto 127
    OrTest                goto 128
    PrimaryExpr           goto 129
    ProductExpr           goto 130
    ShiftExpr             goto 131
    SimpleStmt<SmallStmt> goto 132
    SmallStmt             goto 4
    Stmt                  goto 19
    Test                  goto 134
    TestList              goto 6
}

State 100 {

    AndTest -> AndTest . "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest  -> AndTest .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction OrTest -> AndTest
        lookahead "\n" "%=" "&=" ")" "*=" "+=" "," "-=" "//=" ":" ";" "<<=" "=" ">>=" "]" "^=" "else" "for" "if" "or" "|=" "}"

    "and" shift and goto 20

}

State 101 {

    ArithExpr -> ArithExpr . "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr -> ArithExpr . "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr -> ArithExpr .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction ShiftExpr -> ArithExpr
        lookahead "\n" "!=" "%=" "&" "&=" ")" "*=" "+=" "," "-=" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"

    "+" shift and goto 21
    "-" shift and goto 22

}

State 102 {

    SmallStmt -> AssignStmt .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction SmallStmt -> AssignStmt
        lookahead "\n" ";"


}

State 103 {

    AssignStmt -> AssignStmt_ .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction AssignStmt -> AssignStmt_
        lookahead "\n" ";"


}

State 104 {

    BitAndExpr -> BitAndExpr . "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr -> BitAndExpr .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction BitXorExpr -> BitAndExpr
        lookahead "\n" "!=" "%=" "&=" ")" "*=" "+=" "," "-=" "//=" ":" ";" "<" "<<=" "<=" "=" "==" ">" ">=" ">>=" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"

    "&" shift and goto 23

}

State 105 {

    BitOrExpr -> BitOrExpr . "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest  -> BitOrExpr .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest  -> BitOrExpr . "!=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest  -> BitOrExpr . "<" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest  -> BitOrExpr . "<=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest  -> BitOrExpr . "==" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest  -> BitOrExpr . ">" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest  -> BitOrExpr . ">=" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest  -> BitOrExpr . "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest  -> BitOrExpr . "not" "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction CompTest -> BitOrExpr
        lookahead "\n" "%=" "&=" ")" "*=" "+=" "," "-=" "//=" ":" ";" "<<=" "=" ">>=" "]" "^=" "and" "else" "for" "if" "or" "|=" "}"

    "!=" shift and goto 24
    "<" shift and goto 25
    "<=" shift and goto 26
    "==" shift and goto 27
    ">" shift and goto 28
    ">=" shift and goto 29
    "in" shift and goto 30
    "not" shift and goto 147
    "|" shift and goto 31

}

State 106 {

    BitOrExpr  -> BitXorExpr .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr -> BitXorExpr . "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction BitOrExpr -> BitXorExpr
        lookahead "\n" "!=" "%=" "&=" ")" "*=" "+=" "," "-=" "//=" ":" ";" "<" "<<=" "<=" "=" "==" ">" ">=" ">>=" "]" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"

    "^" shift and goto 32

}

State 107 {

    NotTest -> CompTest .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction NotTest -> CompTest
        lookahead "\n" "%=" "&=" ")" "*=" "+=" "," "-=" "//=" ":" ";" "<<=" "=" ">>=" "]" "^=" "and" "else" "for" "if" "or" "|=" "}"


}

State 108 {

    Stmt -> DefStmt .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Stmt -> DefStmt
        lookahead "\n" "(" "+" "-" "DEDENT" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "break" "continue" "def" "for" "if" "lambda" "load" "not" "pass" "return" "{" "~" EOF


}

State 109 {

    DefStmt -> DefStmt_ .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction DefStmt -> DefStmt_
        lookahead "\n" "(" "+" "-" "DEDENT" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "break" "continue" "def" "for" "if" "lambda" "load" "not" "pass" "return" "{" "~" EOF


}

State 110 {

    Operand -> DictComp .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Operand -> DictComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "*=" "+" "+=" "," "-" "-=" "." "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "[" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 111 {

    DictComp -> DictComp_ .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction DictComp -> DictComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "*=" "+" "+=" "," "-" "-=" "." "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "[" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 112 {

    SmallStmt -> ExprStmt .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction SmallStmt -> ExprStmt
        lookahead "\n" ";"


}

State 113 {

    ExprStmt -> ExprStmt_ .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction ExprStmt -> ExprStmt_
        lookahead "\n" ";"


}

State 114 {

    ProductExpr -> FactorExpr .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction ProductExpr -> FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" ")" "*" "*=" "+" "+=" "," "-" "-=" "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 115 {

    Stmt -> ForStmt .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Stmt -> ForStmt
        lookahead "\n" "(" "+" "-" "DEDENT" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "break" "continue" "def" "for" "if" "lambda" "load" "not" "pass" "return" "{" "~" EOF


}

State 116 {

    ForStmt -> ForStmt_ .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction ForStmt -> ForStmt_
        lookahead "\n" "(" "+" "-" "DEDENT" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "break" "continue" "def" "for" "if" "lambda" "load" "not" "pass" "return" "{" "~" EOF


}

State 117 {

    Stmt -> IfStmt .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Stmt -> IfStmt
        lookahead "\n" "(" "+" "-" "DEDENT" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "break" "continue" "def" "for" "if" "lambda" "load" "not" "pass" "return" "{" "~" EOF


}

State 118 {

    IfStmt -> IfStmt_ .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction IfStmt -> IfStmt_
        lookahead "\n" "(" "+" "-" "DEDENT" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "break" "continue" "def" "for" "if" "lambda" "load" "not" "pass" "return" "{" "~" EOF


}

State 119 {

    TestList -> L<Test> .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction TestList -> L<Test>
        lookahead "\n" "%=" "&=" ")" "*=" "+=" "-=" "//=" ":" ";" "<<=" "=" ">>=" "]" "^=" "|="


}

State 120 {

    Test -> LambDef .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Test -> LambDef
        lookahead "\n" "%=" "&=" ")" "*=" "+=" "," "-=" "//=" ":" ";" "<<=" "=" ">>=" "]" "^=" "for" "|=" "}"


}

State 121 {

    Operand -> ListComp .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Operand -> ListComp
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "*=" "+" "+=" "," "-" "-=" "." "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "[" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 122 {

    ListComp -> ListComp_ .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction ListComp -> ListComp_
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "*=" "+" "+=" "," "-" "-=" "." "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "[" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 123 {

    SmallStmt -> LoadStmt .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction SmallStmt -> LoadStmt
        lookahead "\n" ";"


}

State 124 {

    LoadStmt_ -> LoadStmtInner .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction LoadStmt_ -> LoadStmtInner
        lookahead "\n" ";"


}

State 125 {

    LoadStmt -> LoadStmt_ .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction LoadStmt -> LoadStmt_
        lookahead "\n" ";"


}

State 126 {

    AndTest -> NotTest .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction AndTest -> NotTest
        lookahead "\n" "%=" "&=" ")" "*=" "+=" "," "-=" "//=" ":" ";" "<<=" "=" ">>=" "]" "^=" "and" "else" "for" "if" "or" "|=" "}"


}

State 127 {

    PrimaryExpr -> Operand .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction PrimaryExpr -> Operand
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "*=" "+" "+=" "," "-" "-=" "." "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "[" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 128 {

    OrTest -> OrTest . "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test   -> OrTest .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test   -> OrTest . "if" OrTest "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Test -> OrTest
        lookahead "\n" "%=" "&=" ")" "*=" "+=" "," "-=" "//=" ":" ";" "<<=" "=" ">>=" "]" "^=" "for" "|=" "}"

    "if" shift and goto 33
    "or" shift and goto 34

}

State 129 {

    FactorExpr  -> PrimaryExpr .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr . "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr . "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr . "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr . "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr . "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr . "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr . "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr . "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr . "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr . "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr . "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr . "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr . "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr . "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr . "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction FactorExpr -> PrimaryExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" ")" "*" "*=" "+" "+=" "," "-" "-=" "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"

    "(" shift and goto 35
    "." shift and goto 148
    "[" shift and goto 36

}

State 130 {

    ArithExpr   -> ProductExpr .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> ProductExpr . "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> ProductExpr . "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> ProductExpr . "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> ProductExpr . "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction ArithExpr -> ProductExpr
        lookahead "\n" "!=" "%=" "&" "&=" ")" "*=" "+" "+=" "," "-" "-=" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"

    "%" shift and goto 37
    "*" shift and goto 38
    "/" shift and goto 39
    "//" shift and goto 40

}

State 131 {

    BitAndExpr -> ShiftExpr .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr  -> ShiftExpr . "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr  -> ShiftExpr . ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction BitAndExpr -> ShiftExpr
        lookahead "\n" "!=" "%=" "&" "&=" ")" "*=" "+=" "," "-=" "//=" ":" ";" "<" "<<=" "<=" "=" "==" ">" ">=" ">>=" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"

    "<<" shift and goto 41
    ">>" shift and goto 42

}

State 132 {

    Stmt -> SimpleStmt<SmallStmt> .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Stmt -> SimpleStmt<SmallStmt>
        lookahead "\n" "(" "+" "-" "DEDENT" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "break" "continue" "def" "for" "if" "lambda" "load" "not" "pass" "return" "{" "~" EOF


}

State 133 {

    __Starlark -> Starlark .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction __Starlark -> Starlark
        lookahead EOF


}

State 134 {

    (<Test> ",")+ -> Test . ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ExprStmt_     -> Test .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>       -> Test .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>       -> Test . ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction ExprStmt_ -> Test
        lookahead "\n" ";"

    reduction L<Test> -> Test
        lookahead "%=" "&=" "*=" "+=" "-=" "//=" ":" "<<=" "=" ">>=" "^=" "|="

    "," shift and goto 152

}

State 135 {

    "\n"+ -> "\n" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction "\n"+ -> "\n"
        lookahead "\n" "(" "+" "-" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "break" "continue" "def" "for" "if" "lambda" "load" "not" "pass" "return" "{" "~" EOF


}

State 136 {

    Operand -> "FLOAT" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Operand -> "FLOAT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "*=" "+" "+=" "," "-" "-=" "." "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "[" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 137 {

    Operand -> "IDENTIFIER" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Operand -> "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "*=" "+" "+=" "," "-" "-=" "." "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "[" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 138 {

    Operand -> "INTEGER" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Operand -> "INTEGER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "*=" "+" "+=" "," "-" "-=" "." "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "[" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 139 {

    Operand -> "STRING" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Operand -> "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "*=" "+" "+=" "," "-" "-=" "." "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "[" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 140 {

    SmallStmt -> "break" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction SmallStmt -> "break"
        lookahead "\n" ";"


}

State 141 {

    SmallStmt -> "continue" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction SmallStmt -> "continue"
        lookahead "\n" ";"


}

State 142 {

    DefStmt_ -> "def" . "IDENTIFIER" "(" COMMA<ParameterTyped> ")" ReturnType ":" Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "IDENTIFIER" shift and goto 159

}

State 143 {

    LoadStmtInner -> "load" . "(" "STRING" ("," <LoadStmtSyms>)+ ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner -> "load" . "(" "STRING" ("," <LoadStmtSyms>)+ "," ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "(" shift and goto 171

}

State 144 {

    SmallStmt -> "pass" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction SmallStmt -> "pass"
        lookahead "\n" ";"


}

State 145 {

    "\n"+ -> "\n"+ "\n" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction "\n"+ -> "\n"+ "\n"
        lookahead "\n" "(" "+" "-" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "break" "continue" "def" "for" "if" "lambda" "load" "not" "pass" "return" "{" "~" EOF


}

State 146 {

    (<Test> ",")+ -> (<Test> ",")+ Test . ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>       -> (<Test> ",")+ Test .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>       -> (<Test> ",")+ Test . ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction L<Test> -> (<Test> ",")+ Test
        lookahead "\n" "%=" "&=" ")" "*=" "+=" "-=" "//=" ":" ";" "<<=" "=" ">>=" "]" "^=" "|="

    "," shift and goto 178

}

State 147 {

    CompTest -> BitOrExpr "not" . "in" BitOrExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "in" shift and goto 54

}

State 148 {

    PrimaryExpr -> PrimaryExpr "." . "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "IDENTIFIER" shift and goto 199

}

State 149 {

    (";" <SmallStmt>)+    -> (";" <SmallStmt>)+ . ";" SmallStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> SmallStmt (";" <SmallStmt>)+ . "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    SimpleStmt<SmallStmt> -> SmallStmt (";" <SmallStmt>)+ . ";" "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "\n" shift and goto 208
    ";" shift and goto 59

}

State 150 {

    SimpleStmt<SmallStmt> -> SmallStmt "\n" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction SimpleStmt<SmallStmt> -> SmallStmt "\n"
        lookahead "\n" "(" "+" "-" "DEDENT" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "break" "continue" "def" "elif" "else" "for" "if" "lambda" "load" "not" "pass" "return" "{" "~" EOF


}

State 151 {

    "\n"+           -> "\n"+ . "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Stmt> "\n"*)+ -> Stmt "\n"+ .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction (<Stmt> "\n"*)+ -> Stmt "\n"+
        lookahead "(" "+" "-" "DEDENT" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "break" "continue" "def" "for" "if" "lambda" "load" "not" "pass" "return" "{" "~" EOF

    "\n" shift and goto 145

}

State 152 {

    (<Test> ",")+ -> Test "," .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>       -> Test "," .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction (<Test> ",")+ -> Test ","
        lookahead "(" "+" "-" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "lambda" "not" "{" "~"

    reduction L<Test> -> Test ","
        lookahead "\n" "%=" "&=" ")" "*=" "+=" "-=" "//=" ":" ";" "<<=" "=" ">>=" "]" "^=" "|="


}

State 153 {

    (<Test> ",")+ -> Test . ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>       -> Test .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>       -> Test . ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction L<Test> -> Test
        lookahead "\n" ")" ";"

    "," shift and goto 152

}

State 154 {

    Operand -> "(" TestList . ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ")" shift and goto 223

}

State 155 {

    Operand -> "(" ")" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Operand -> "(" ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "*=" "+" "+=" "," "-" "-=" "." "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "[" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 156 {

    FactorExpr -> "+" FactorExpr .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction FactorExpr -> "+" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" ")" "*" "*=" "+" "+=" "," "-" "-=" "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 157 {

    FactorExpr -> "-" FactorExpr .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction FactorExpr -> "-" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" ")" "*" "*=" "+" "+=" "," "-" "-=" "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 158 {

    Operand -> "[" COMMA<Test> . "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "]" shift and goto 225

}

State 159 {

    DefStmt_ -> "def" "IDENTIFIER" . "(" COMMA<ParameterTyped> ")" ReturnType ":" Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "(" shift and goto 63

}

State 160 {

    BitOrExpr -> BitOrExpr . "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Expr      -> BitOrExpr .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Expr -> BitOrExpr
        lookahead "," "in"

    "|" shift and goto 31

}

State 161 {

    (<Expr> ",")+ -> Expr . ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Expr>       -> Expr .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Expr>       -> Expr . ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction L<Expr> -> Expr
        lookahead "in"

    "," shift and goto 229

}

State 162 {

    ForStmt_ -> "for" ExprList . "in" Test ":" Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "in" shift and goto 64

}

State 163 {

    ExprList -> L<Expr> .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction ExprList -> L<Expr>
        lookahead "in"


}

State 164 {

    IfStmt_ -> "if" IfBody_ .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction IfStmt_ -> "if" IfBody_
        lookahead "\n" "(" "+" "-" "DEDENT" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "break" "continue" "def" "for" "if" "lambda" "load" "not" "pass" "return" "{" "~" EOF


}

State 165 {

    IfBody_ -> Test . ":" Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    IfBody_ -> Test . ":" Suite ElseStmt
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ":" shift and goto 65

}

State 166 {

    Parameter_ -> AssignIdent .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Parameter_ -> AssignIdent . "=" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Parameter_ -> AssignIdent
        lookahead "," ":"

    "=" shift and goto 66

}

State 167 {

    LambDef -> "lambda" COMMA<Parameter> . ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ":" shift and goto 67

}

State 168 {

    (<Parameter> ",")+ -> Parameter . ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<Parameter>   -> Parameter .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction COMMA<Parameter> -> Parameter
        lookahead ":"

    "," shift and goto 231

}

State 169 {

    Parameter -> Parameter_ .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Parameter -> Parameter_
        lookahead "," ":"


}

State 170 {

    AssignIdent -> "IDENTIFIER" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction AssignIdent -> "IDENTIFIER"
        lookahead ")" "," ":" "="


}

State 171 {

    LoadStmtInner -> "load" "(" . "STRING" ("," <LoadStmtSyms>)+ ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner -> "load" "(" . "STRING" ("," <LoadStmtSyms>)+ "," ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "STRING" shift and goto 68

}

State 172 {

    NotTest -> "not" NotTest .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction NotTest -> "not" NotTest
        lookahead "\n" "%=" "&=" ")" "*=" "+=" "," "-=" "//=" ":" ";" "<<=" "=" ">>=" "]" "^=" "and" "else" "for" "if" "or" "|=" "}"


}

State 173 {

    SmallStmt -> "return" TestList .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction SmallStmt -> "return" TestList
        lookahead "\n" ";"


}

State 174 {

    Operand -> "{" COMMA<DictEntry> . "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "}" shift and goto 235

}

State 175 {

    DictEntry -> Test . ":" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ":" shift and goto 69

}

State 176 {

    FactorExpr -> "~" FactorExpr .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction FactorExpr -> "~" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" ")" "*" "*=" "+" "+=" "," "-" "-=" "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 177 {

    "\n"+           -> "\n"+ . "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    (<Stmt> "\n"*)+ -> (<Stmt> "\n"*)+ Stmt "\n"+ .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction (<Stmt> "\n"*)+ -> (<Stmt> "\n"*)+ Stmt "\n"+
        lookahead "(" "+" "-" "DEDENT" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "break" "continue" "def" "for" "if" "lambda" "load" "not" "pass" "return" "{" "~" EOF

    "\n" shift and goto 145

}

State 178 {

    (<Test> ",")+ -> (<Test> ",")+ Test "," .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>       -> (<Test> ",")+ Test "," .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction (<Test> ",")+ -> (<Test> ",")+ Test ","
        lookahead "(" "+" "-" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "lambda" "not" "{" "~"

    reduction L<Test> -> (<Test> ",")+ Test ","
        lookahead "\n" "%=" "&=" ")" "*=" "+=" "-=" "//=" ":" ";" "<<=" "=" ">>=" "]" "^=" "|="


}

State 179 {

    AndTest -> AndTest "and" NotTest .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction AndTest -> AndTest "and" NotTest
        lookahead "\n" "%=" "&=" ")" "*=" "+=" "," "-=" "//=" ":" ";" "<<=" "=" ">>=" "]" "^=" "and" "else" "for" "if" "or" "|=" "}"


}

State 180 {

    ArithExpr   -> ArithExpr "+" ProductExpr .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> ProductExpr . "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> ProductExpr . "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> ProductExpr . "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> ProductExpr . "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction ArithExpr -> ArithExpr "+" ProductExpr
        lookahead "\n" "!=" "%=" "&" "&=" ")" "*=" "+" "+=" "," "-" "-=" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"

    "%" shift and goto 37
    "*" shift and goto 38
    "/" shift and goto 39
    "//" shift and goto 40

}

State 181 {

    ArithExpr   -> ArithExpr "-" ProductExpr .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> ProductExpr . "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> ProductExpr . "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> ProductExpr . "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ProductExpr -> ProductExpr . "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction ArithExpr -> ArithExpr "-" ProductExpr
        lookahead "\n" "!=" "%=" "&" "&=" ")" "*=" "+" "+=" "," "-" "-=" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"

    "%" shift and goto 37
    "*" shift and goto 38
    "/" shift and goto 39
    "//" shift and goto 40

}

State 182 {

    BitAndExpr -> BitAndExpr "&" ShiftExpr .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr  -> ShiftExpr . "<<" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr  -> ShiftExpr . ">>" ArithExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction BitAndExpr -> BitAndExpr "&" ShiftExpr
        lookahead "\n" "!=" "%=" "&" "&=" ")" "*=" "+=" "," "-=" "//=" ":" ";" "<" "<<=" "<=" "=" "==" ">" ">=" ">>=" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"

    "<<" shift and goto 41
    ">>" shift and goto 42

}

State 183 {

    BitOrExpr -> BitOrExpr . "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest  -> BitOrExpr "!=" BitOrExpr .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction CompTest -> BitOrExpr "!=" BitOrExpr
        lookahead "\n" "%=" "&=" ")" "*=" "+=" "," "-=" "//=" ":" ";" "<<=" "=" ">>=" "]" "^=" "and" "else" "for" "if" "or" "|=" "}"

    "|" shift and goto 31

}

State 184 {

    BitOrExpr -> BitOrExpr . "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest  -> BitOrExpr "<" BitOrExpr .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction CompTest -> BitOrExpr "<" BitOrExpr
        lookahead "\n" "%=" "&=" ")" "*=" "+=" "," "-=" "//=" ":" ";" "<<=" "=" ">>=" "]" "^=" "and" "else" "for" "if" "or" "|=" "}"

    "|" shift and goto 31

}

State 185 {

    BitOrExpr -> BitOrExpr . "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest  -> BitOrExpr "<=" BitOrExpr .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction CompTest -> BitOrExpr "<=" BitOrExpr
        lookahead "\n" "%=" "&=" ")" "*=" "+=" "," "-=" "//=" ":" ";" "<<=" "=" ">>=" "]" "^=" "and" "else" "for" "if" "or" "|=" "}"

    "|" shift and goto 31

}

State 186 {

    BitOrExpr -> BitOrExpr . "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest  -> BitOrExpr "==" BitOrExpr .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction CompTest -> BitOrExpr "==" BitOrExpr
        lookahead "\n" "%=" "&=" ")" "*=" "+=" "," "-=" "//=" ":" ";" "<<=" "=" ">>=" "]" "^=" "and" "else" "for" "if" "or" "|=" "}"

    "|" shift and goto 31

}

State 187 {

    BitOrExpr -> BitOrExpr . "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest  -> BitOrExpr ">" BitOrExpr .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction CompTest -> BitOrExpr ">" BitOrExpr
        lookahead "\n" "%=" "&=" ")" "*=" "+=" "," "-=" "//=" ":" ";" "<<=" "=" ">>=" "]" "^=" "and" "else" "for" "if" "or" "|=" "}"

    "|" shift and goto 31

}

State 188 {

    BitOrExpr -> BitOrExpr . "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest  -> BitOrExpr ">=" BitOrExpr .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction CompTest -> BitOrExpr ">=" BitOrExpr
        lookahead "\n" "%=" "&=" ")" "*=" "+=" "," "-=" "//=" ":" ";" "<<=" "=" ">>=" "]" "^=" "and" "else" "for" "if" "or" "|=" "}"

    "|" shift and goto 31

}

State 189 {

    BitOrExpr -> BitOrExpr . "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest  -> BitOrExpr "in" BitOrExpr .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction CompTest -> BitOrExpr "in" BitOrExpr
        lookahead "\n" "%=" "&=" ")" "*=" "+=" "," "-=" "//=" ":" ";" "<<=" "=" ">>=" "]" "^=" "and" "else" "for" "if" "or" "|=" "}"

    "|" shift and goto 31

}

State 190 {

    BitOrExpr  -> BitOrExpr "|" BitXorExpr .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr -> BitXorExpr . "^" BitAndExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction BitOrExpr -> BitOrExpr "|" BitXorExpr
        lookahead "\n" "!=" "%=" "&=" ")" "*=" "+=" "," "-=" "//=" ":" ";" "<" "<<=" "<=" "=" "==" ">" ">=" ">>=" "]" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"

    "^" shift and goto 32

}

State 191 {

    BitAndExpr -> BitAndExpr . "&" ShiftExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    BitXorExpr -> BitXorExpr "^" BitAndExpr .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction BitXorExpr -> BitXorExpr "^" BitAndExpr
        lookahead "\n" "!=" "%=" "&=" ")" "*=" "+=" "," "-=" "//=" ":" ";" "<" "<<=" "<=" "=" "==" ">" ">=" ">>=" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"

    "&" shift and goto 23

}

State 192 {

    OrTest -> OrTest . "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Test   -> OrTest "if" OrTest . "else" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "else" shift and goto 70
    "or" shift and goto 34

}

State 193 {

    AndTest -> AndTest . "and" NotTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest  -> OrTest "or" AndTest .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction OrTest -> OrTest "or" AndTest
        lookahead "\n" "%=" "&=" ")" "*=" "+=" "," "-=" "//=" ":" ";" "<<=" "=" ">>=" "]" "^=" "else" "for" "if" "or" "|=" "}"

    "and" shift and goto 20

}

State 194 {

    (<Argument> ",")+ -> Argument . ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<Argument>   -> Argument .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction COMMA<Argument> -> Argument
        lookahead ")"

    "," shift and goto 240

}

State 195 {

    Argument -> Argument_ .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Argument -> Argument_
        lookahead ")" ","


}

State 196 {

    PrimaryExpr -> PrimaryExpr "(" COMMA<Argument> . ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ")" shift and goto 241

}

State 197 {

    Argument_ -> Test .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Argument_ -> Test
        lookahead ")" ","


}

State 198 {

    Argument_ -> "IDENTIFIER" . "=" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Operand   -> "IDENTIFIER" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Operand -> "IDENTIFIER"
        lookahead "!=" "%" "&" "(" ")" "*" "+" "," "-" "." "/" "//" "<" "<<" "<=" "==" ">" ">=" ">>" "[" "^" "and" "if" "in" "not" "or" "|"

    "=" shift and goto 71

}

State 199 {

    PrimaryExpr -> PrimaryExpr "." "IDENTIFIER" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction PrimaryExpr -> PrimaryExpr "." "IDENTIFIER"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "*=" "+" "+=" "," "-" "-=" "." "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "[" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 200 {

    (<Test> ",")+ -> Test . ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>       -> Test .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Test>       -> Test . ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> PrimaryExpr "[" Test . ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> PrimaryExpr "[" Test . ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> PrimaryExpr "[" Test . ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> PrimaryExpr "[" Test . ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> PrimaryExpr "[" Test . ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr   -> PrimaryExpr "[" Test . ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction L<Test> -> Test
        lookahead "]"

    "," shift and goto 152
    ":" shift and goto 72

}

State 201 {

    PrimaryExpr -> PrimaryExpr "[" TestList . "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "]" shift and goto 244

}

State 202 {

    ProductExpr -> ProductExpr "%" FactorExpr .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction ProductExpr -> ProductExpr "%" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" ")" "*" "*=" "+" "+=" "," "-" "-=" "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 203 {

    ProductExpr -> ProductExpr "*" FactorExpr .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction ProductExpr -> ProductExpr "*" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" ")" "*" "*=" "+" "+=" "," "-" "-=" "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 204 {

    ProductExpr -> ProductExpr "/" FactorExpr .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction ProductExpr -> ProductExpr "/" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" ")" "*" "*=" "+" "+=" "," "-" "-=" "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 205 {

    ProductExpr -> ProductExpr "//" FactorExpr .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction ProductExpr -> ProductExpr "//" FactorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" ")" "*" "*=" "+" "+=" "," "-" "-=" "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 206 {

    ArithExpr -> ArithExpr . "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr -> ArithExpr . "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr -> ShiftExpr "<<" ArithExpr .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction ShiftExpr -> ShiftExpr "<<" ArithExpr
        lookahead "\n" "!=" "%=" "&" "&=" ")" "*=" "+=" "," "-=" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"

    "+" shift and goto 21
    "-" shift and goto 22

}

State 207 {

    ArithExpr -> ArithExpr . "+" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ArithExpr -> ArithExpr . "-" ProductExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ShiftExpr -> ShiftExpr ">>" ArithExpr .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction ShiftExpr -> ShiftExpr ">>" ArithExpr
        lookahead "\n" "!=" "%=" "&" "&=" ")" "*=" "+=" "," "-=" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"

    "+" shift and goto 21
    "-" shift and goto 22

}

State 208 {

    SimpleStmt<SmallStmt> -> SmallStmt (";" <SmallStmt>)+ "\n" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction SimpleStmt<SmallStmt> -> SmallStmt (";" <SmallStmt>)+ "\n"
        lookahead "\n" "(" "+" "-" "DEDENT" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "break" "continue" "def" "elif" "else" "for" "if" "lambda" "load" "not" "pass" "return" "{" "~" EOF


}

State 209 {

    (";" <SmallStmt>)+ -> ";" SmallStmt .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction (";" <SmallStmt>)+ -> ";" SmallStmt
        lookahead "\n" ";"


}

State 210 {

    SimpleStmt<SmallStmt> -> SmallStmt ";" "\n" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction SimpleStmt<SmallStmt> -> SmallStmt ";" "\n"
        lookahead "\n" "(" "+" "-" "DEDENT" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "break" "continue" "def" "elif" "else" "for" "if" "lambda" "load" "not" "pass" "return" "{" "~" EOF


}

State 211 {

    AssignOp -> "%=" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction AssignOp -> "%="
        lookahead "(" "+" "-" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "lambda" "not" "{" "~"


}

State 212 {

    AssignOp -> "&=" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction AssignOp -> "&="
        lookahead "(" "+" "-" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "lambda" "not" "{" "~"


}

State 213 {

    AssignOp -> "*=" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction AssignOp -> "*="
        lookahead "(" "+" "-" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "lambda" "not" "{" "~"


}

State 214 {

    AssignOp -> "+=" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction AssignOp -> "+="
        lookahead "(" "+" "-" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "lambda" "not" "{" "~"


}

State 215 {

    AssignOp -> "-=" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction AssignOp -> "-="
        lookahead "(" "+" "-" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "lambda" "not" "{" "~"


}

State 216 {

    AssignOp -> "//=" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction AssignOp -> "//="
        lookahead "(" "+" "-" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "lambda" "not" "{" "~"


}

State 217 {

    AssignOp -> "<<=" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction AssignOp -> "<<="
        lookahead "(" "+" "-" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "lambda" "not" "{" "~"


}

State 218 {

    AssignOp -> "=" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction AssignOp -> "="
        lookahead "(" "+" "-" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "lambda" "not" "{" "~"


}

State 219 {

    AssignOp -> ">>=" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction AssignOp -> ">>="
        lookahead "(" "+" "-" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "lambda" "not" "{" "~"


}

State 220 {

    AssignOp -> "^=" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction AssignOp -> "^="
        lookahead "(" "+" "-" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "lambda" "not" "{" "~"


}

State 221 {

    AssignOp -> "|=" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction AssignOp -> "|="
        lookahead "(" "+" "-" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "lambda" "not" "{" "~"


}

State 222 {

    Type -> ":" Test .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Type -> ":" Test
        lookahead "%=" "&=" ")" "*=" "+=" "," "-=" "//=" "<<=" "=" ">>=" "^=" "|="


}

State 223 {

    Operand -> "(" TestList ")" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Operand -> "(" TestList ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "*=" "+" "+=" "," "-" "-=" "." "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "[" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 224 {

    (<Test> ",")+ -> (<Test> ",")+ Test . ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<Test>   -> (<Test> ",")+ Test .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction COMMA<Test> -> (<Test> ",")+ Test
        lookahead "]"

    "," shift and goto 250

}

State 225 {

    Operand -> "[" COMMA<Test> "]" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Operand -> "[" COMMA<Test> "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "*=" "+" "+=" "," "-" "-=" "." "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "[" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 226 {

    ListComp_ -> "[" Test CompClause . "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "]" shift and goto 251

}

State 227 {

    (<Test> ",")+ -> Test "," .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction (<Test> ",")+ -> Test ","
        lookahead "(" "+" "-" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "]" "lambda" "not" "{" "~"


}

State 228 {

    (<Expr> ",")+ -> (<Expr> ",")+ Expr . ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Expr>       -> (<Expr> ",")+ Expr .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Expr>       -> (<Expr> ",")+ Expr . ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction L<Expr> -> (<Expr> ",")+ Expr
        lookahead "in"

    "," shift and goto 258

}

State 229 {

    (<Expr> ",")+ -> Expr "," .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Expr>       -> Expr "," .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction (<Expr> ",")+ -> Expr ","
        lookahead "(" "+" "-" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "{" "~"

    reduction L<Expr> -> Expr ","
        lookahead "in"


}

State 230 {

    (<Parameter> ",")+ -> (<Parameter> ",")+ Parameter . ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<Parameter>   -> (<Parameter> ",")+ Parameter .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction COMMA<Parameter> -> (<Parameter> ",")+ Parameter
        lookahead ":"

    "," shift and goto 262

}

State 231 {

    (<Parameter> ",")+ -> Parameter "," .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction (<Parameter> ",")+ -> Parameter ","
        lookahead "*" "**" ":" "IDENTIFIER"


}

State 232 {

    Parameter_ -> "*" AssignIdent .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Parameter_ -> "*" AssignIdent
        lookahead "," ":"


}

State 233 {

    Parameter_ -> "**" AssignIdent .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Parameter_ -> "**" AssignIdent
        lookahead "," ":"


}

State 234 {

    (<DictEntry> ",")+ -> (<DictEntry> ",")+ DictEntry . ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<DictEntry>   -> (<DictEntry> ",")+ DictEntry .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction COMMA<DictEntry> -> (<DictEntry> ",")+ DictEntry
        lookahead "}"

    "," shift and goto 266

}

State 235 {

    Operand -> "{" COMMA<DictEntry> "}" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Operand -> "{" COMMA<DictEntry> "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "*=" "+" "+=" "," "-" "-=" "." "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "[" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 236 {

    DictComp_ -> "{" DictEntry CompClause . "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "}" shift and goto 267

}

State 237 {

    (<DictEntry> ",")+ -> DictEntry "," .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction (<DictEntry> ",")+ -> DictEntry ","
        lookahead "(" "+" "-" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "lambda" "not" "{" "}" "~"


}

State 238 {

    BitOrExpr -> BitOrExpr . "|" BitXorExpr
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    CompTest  -> BitOrExpr "not" "in" BitOrExpr .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction CompTest -> BitOrExpr "not" "in" BitOrExpr
        lookahead "\n" "%=" "&=" ")" "*=" "+=" "," "-=" "//=" ":" ";" "<<=" "=" ">>=" "]" "^=" "and" "else" "for" "if" "or" "|=" "}"

    "|" shift and goto 31

}

State 239 {

    (<Argument> ",")+ -> (<Argument> ",")+ Argument . ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<Argument>   -> (<Argument> ",")+ Argument .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction COMMA<Argument> -> (<Argument> ",")+ Argument
        lookahead ")"

    "," shift and goto 270

}

State 240 {

    (<Argument> ",")+ -> Argument "," .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction (<Argument> ",")+ -> Argument ","
        lookahead "(" ")" "*" "**" "+" "-" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "lambda" "not" "{" "~"


}

State 241 {

    PrimaryExpr -> PrimaryExpr "(" COMMA<Argument> ")" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction PrimaryExpr -> PrimaryExpr "(" COMMA<Argument> ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "*=" "+" "+=" "," "-" "-=" "." "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "[" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 242 {

    Argument_ -> "*" Test .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Argument_ -> "*" Test
        lookahead ")" ","


}

State 243 {

    Argument_ -> "**" Test .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Argument_ -> "**" Test
        lookahead ")" ","


}

State 244 {

    PrimaryExpr -> PrimaryExpr "[" TestList "]" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction PrimaryExpr -> PrimaryExpr "[" TestList "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "*=" "+" "+=" "," "-" "-=" "." "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "[" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 245 {

    PrimaryExpr -> PrimaryExpr "[" ":" Test . ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr "[" ":" Test . ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr "[" ":" Test . "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ":" shift and goto 83
    "]" shift and goto 274

}

State 246 {

    PrimaryExpr -> PrimaryExpr "[" ":" "]" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction PrimaryExpr -> PrimaryExpr "[" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "*=" "+" "+=" "," "-" "-=" "." "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "[" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 247 {

    (";" <SmallStmt>)+ -> (";" <SmallStmt>)+ ";" SmallStmt .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction (";" <SmallStmt>)+ -> (";" <SmallStmt>)+ ";" SmallStmt
        lookahead "\n" ";"


}

State 248 {

    SimpleStmt<SmallStmt> -> SmallStmt (";" <SmallStmt>)+ ";" "\n" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction SimpleStmt<SmallStmt> -> SmallStmt (";" <SmallStmt>)+ ";" "\n"
        lookahead "\n" "(" "+" "-" "DEDENT" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "break" "continue" "def" "elif" "else" "for" "if" "lambda" "load" "not" "pass" "return" "{" "~" EOF


}

State 249 {

    AssignStmt_ -> TestList Type AssignOp TestList .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction AssignStmt_ -> TestList Type AssignOp TestList
        lookahead "\n" ";"


}

State 250 {

    (<Test> ",")+ -> (<Test> ",")+ Test "," .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction (<Test> ",")+ -> (<Test> ",")+ Test ","
        lookahead "(" "+" "-" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "]" "lambda" "not" "{" "~"


}

State 251 {

    ListComp_ -> "[" Test CompClause "]" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction ListComp_ -> "[" Test CompClause "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "*=" "+" "+=" "," "-" "-=" "." "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "[" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 252 {

    Clause+ -> Clause .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Clause+ -> Clause
        lookahead "]" "for" "if" "}"


}

State 253 {

    Clause -> ForClause .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Clause -> ForClause
        lookahead "]" "for" "if" "}"


}

State 254 {

    ForClause -> "for" ExprList . "in" OrTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "in" shift and goto 84

}

State 255 {

    DefStmt_ -> "def" "IDENTIFIER" "(" COMMA<ParameterTyped> . ")" ReturnType ":" Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ")" shift and goto 85

}

State 256 {

    (<ParameterTyped> ",")+ -> ParameterTyped . ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<ParameterTyped>   -> ParameterTyped .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction COMMA<ParameterTyped> -> ParameterTyped
        lookahead ")"

    "," shift and goto 281

}

State 257 {

    ParameterTyped -> ParameterTyped_ .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction ParameterTyped -> ParameterTyped_
        lookahead ")" ","


}

State 258 {

    (<Expr> ",")+ -> (<Expr> ",")+ Expr "," .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    L<Expr>       -> (<Expr> ",")+ Expr "," .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction (<Expr> ",")+ -> (<Expr> ",")+ Expr ","
        lookahead "(" "+" "-" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "{" "~"

    reduction L<Expr> -> (<Expr> ",")+ Expr ","
        lookahead "in"


}

State 259 {

    ForStmt_ -> "for" ExprList "in" Test . ":" Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ":" shift and goto 88

}

State 260 {

    "\n"+ -> "\n"+ . "\n"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Suite -> "\n"+ . "INDENT" "\n"+ (<Stmt> "\n"*)+ "DEDENT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    Suite -> "\n"+ . "INDENT" (<Stmt> "\n"*)+ "DEDENT"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "\n"   shift and goto 145
    "INDENT" shift and goto 89

}

State 261 {

    Suite -> SimpleStmt<SmallStmt> .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Suite -> SimpleStmt<SmallStmt>
        lookahead "\n" "(" "+" "-" "DEDENT" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "break" "continue" "def" "elif" "else" "for" "if" "lambda" "load" "not" "pass" "return" "{" "~" EOF


}

State 262 {

    (<Parameter> ",")+ -> (<Parameter> ",")+ Parameter "," .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction (<Parameter> ",")+ -> (<Parameter> ",")+ Parameter ","
        lookahead "*" "**" ":" "IDENTIFIER"


}

State 263 {

    Parameter_ -> AssignIdent "=" Test .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Parameter_ -> AssignIdent "=" Test
        lookahead "," ":"


}

State 264 {

    LambDef -> "lambda" COMMA<Parameter> ":" Test .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction LambDef -> "lambda" COMMA<Parameter> ":" Test
        lookahead "\n" "%=" "&=" ")" "*=" "+=" "," "-=" "//=" ":" ";" "<<=" "=" ">>=" "]" "^=" "for" "|=" "}"


}

State 265 {

    ("," <LoadStmtSyms>)+ -> ("," <LoadStmtSyms>)+ . "," LoadStmtSyms
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner         -> "load" "(" "STRING" ("," <LoadStmtSyms>)+ . ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    LoadStmtInner         -> "load" "(" "STRING" ("," <LoadStmtSyms>)+ . "," ")"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ")" shift and goto 284
    "," shift and goto 91

}

State 266 {

    (<DictEntry> ",")+ -> (<DictEntry> ",")+ DictEntry "," .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction (<DictEntry> ",")+ -> (<DictEntry> ",")+ DictEntry ","
        lookahead "(" "+" "-" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "lambda" "not" "{" "}" "~"


}

State 267 {

    DictComp_ -> "{" DictEntry CompClause "}" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction DictComp_ -> "{" DictEntry CompClause "}"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "*=" "+" "+=" "," "-" "-=" "." "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "[" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 268 {

    DictEntry -> Test ":" Test .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction DictEntry -> Test ":" Test
        lookahead "," "for" "}"


}

State 269 {

    Test -> OrTest "if" OrTest "else" Test .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Test -> OrTest "if" OrTest "else" Test
        lookahead "\n" "%=" "&=" ")" "*=" "+=" "," "-=" "//=" ":" ";" "<<=" "=" ">>=" "]" "^=" "for" "|=" "}"


}

State 270 {

    (<Argument> ",")+ -> (<Argument> ",")+ Argument "," .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction (<Argument> ",")+ -> (<Argument> ",")+ Argument ","
        lookahead "(" ")" "*" "**" "+" "-" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "lambda" "not" "{" "~"


}

State 271 {

    Argument_ -> "IDENTIFIER" "=" Test .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Argument_ -> "IDENTIFIER" "=" Test
        lookahead ")" ","


}

State 272 {

    PrimaryExpr -> PrimaryExpr "[" Test ":" Test . ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr "[" Test ":" Test . ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    PrimaryExpr -> PrimaryExpr "[" Test ":" Test . "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ":" shift and goto 92
    "]" shift and goto 289

}

State 273 {

    PrimaryExpr -> PrimaryExpr "[" Test ":" "]" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction PrimaryExpr -> PrimaryExpr "[" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "*=" "+" "+=" "," "-" "-=" "." "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "[" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 274 {

    PrimaryExpr -> PrimaryExpr "[" ":" Test "]" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction PrimaryExpr -> PrimaryExpr "[" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "*=" "+" "+=" "," "-" "-=" "." "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "[" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 275 {

    PrimaryExpr -> PrimaryExpr "[" ":" ":" Test . "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "]" shift and goto 294

}

State 276 {

    PrimaryExpr -> PrimaryExpr "[" ":" ":" "]" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction PrimaryExpr -> PrimaryExpr "[" ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "*=" "+" "+=" "," "-" "-=" "." "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "[" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 277 {

    Clause+ -> Clause+ Clause .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Clause+ -> Clause+ Clause
        lookahead "]" "for" "if" "}"


}

State 278 {

    Clause -> "if" OrTest .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest -> OrTest . "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Clause -> "if" OrTest
        lookahead "]" "for" "if" "}"

    "or" shift and goto 34

}

State 279 {

    (<ParameterTyped> ",")+ -> (<ParameterTyped> ",")+ ParameterTyped . ","
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    COMMA<ParameterTyped>   -> (<ParameterTyped> ",")+ ParameterTyped .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction COMMA<ParameterTyped> -> (<ParameterTyped> ",")+ ParameterTyped
        lookahead ")"

    "," shift and goto 296

}

State 280 {

    ParameterTyped_ -> AssignIdent Type .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ParameterTyped_ -> AssignIdent Type . "=" Test
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction ParameterTyped_ -> AssignIdent Type
        lookahead ")" ","

    "=" shift and goto 93

}

State 281 {

    (<ParameterTyped> ",")+ -> ParameterTyped "," .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction (<ParameterTyped> ",")+ -> ParameterTyped ","
        lookahead ")" "*" "**" "IDENTIFIER"


}

State 282 {

    IfBody_ -> Test ":" Suite ElseStmt .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction IfBody_ -> Test ":" Suite ElseStmt
        lookahead "\n" "(" "+" "-" "DEDENT" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "break" "continue" "def" "for" "if" "lambda" "load" "not" "pass" "return" "{" "~" EOF


}

State 283 {

    ElseStmt -> "else" . ":" Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ":" shift and goto 97

}

State 284 {

    LoadStmtInner -> "load" "(" "STRING" ("," <LoadStmtSyms>)+ ")" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction LoadStmtInner -> "load" "(" "STRING" ("," <LoadStmtSyms>)+ ")"
        lookahead "\n" ";"


}

State 285 {

    LoadStmtSyms -> LoadStmtBindingName . "STRING"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "STRING" shift and goto 305

}

State 286 {

    ("," <LoadStmtSyms>)+ -> "," LoadStmtSyms .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction ("," <LoadStmtSyms>)+ -> "," LoadStmtSyms
        lookahead ")" ","


}

State 287 {

    LoadStmtBindingName -> "IDENTIFIER" . "="
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "=" shift and goto 306

}

State 288 {

    LoadStmtSyms -> "STRING" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction LoadStmtSyms -> "STRING"
        lookahead ")" ","


}

State 289 {

    PrimaryExpr -> PrimaryExpr "[" Test ":" Test "]" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction PrimaryExpr -> PrimaryExpr "[" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "*=" "+" "+=" "," "-" "-=" "." "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "[" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 290 {

    PrimaryExpr -> PrimaryExpr "[" Test ":" ":" Test . "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "]" shift and goto 309

}

State 291 {

    PrimaryExpr -> PrimaryExpr "[" Test ":" ":" "]" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction PrimaryExpr -> PrimaryExpr "[" Test ":" ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "*=" "+" "+=" "," "-" "-=" "." "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "[" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 292 {

    PrimaryExpr -> PrimaryExpr "[" ":" Test ":" Test . "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "]" shift and goto 310

}

State 293 {

    PrimaryExpr -> PrimaryExpr "[" ":" Test ":" "]" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction PrimaryExpr -> PrimaryExpr "[" ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "*=" "+" "+=" "," "-" "-=" "." "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "[" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 294 {

    PrimaryExpr -> PrimaryExpr "[" ":" ":" Test "]" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction PrimaryExpr -> PrimaryExpr "[" ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "*=" "+" "+=" "," "-" "-=" "." "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "[" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 295 {

    ForClause -> "for" ExprList "in" OrTest .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    OrTest    -> OrTest . "or" AndTest
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction ForClause -> "for" ExprList "in" OrTest
        lookahead "]" "for" "if" "}"

    "or" shift and goto 34

}

State 296 {

    (<ParameterTyped> ",")+ -> (<ParameterTyped> ",")+ ParameterTyped "," .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction (<ParameterTyped> ",")+ -> (<ParameterTyped> ",")+ ParameterTyped ","
        lookahead ")" "*" "**" "IDENTIFIER"


}

State 297 {

    DefStmt_ -> "def" "IDENTIFIER" "(" COMMA<ParameterTyped> ")" ReturnType . ":" Suite
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    ":" shift and goto 98

}

State 298 {

    ParameterTyped_ -> "*" AssignIdent Type .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction ParameterTyped_ -> "*" AssignIdent Type
        lookahead ")" ","


}

State 299 {

    ParameterTyped_ -> "**" AssignIdent Type .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction ParameterTyped_ -> "**" AssignIdent Type
        lookahead ")" ","


}

State 300 {

    ForStmt_ -> "for" ExprList "in" Test ":" Suite .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction ForStmt_ -> "for" ExprList "in" Test ":" Suite
        lookahead "\n" "(" "+" "-" "DEDENT" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "break" "continue" "def" "for" "if" "lambda" "load" "not" "pass" "return" "{" "~" EOF


}

State 301 {

    ElseStmt -> "elif" IfBody .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction ElseStmt -> "elif" IfBody
        lookahead "\n" "(" "+" "-" "DEDENT" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "break" "continue" "def" "for" "if" "lambda" "load" "not" "pass" "return" "{" "~" EOF


}

State 302 {

    IfBody -> IfBody_ .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction IfBody -> IfBody_
        lookahead "\n" "(" "+" "-" "DEDENT" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "break" "continue" "def" "for" "if" "lambda" "load" "not" "pass" "return" "{" "~" EOF


}

State 303 {

    ("," <LoadStmtSyms>)+ -> ("," <LoadStmtSyms>)+ "," LoadStmtSyms .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction ("," <LoadStmtSyms>)+ -> ("," <LoadStmtSyms>)+ "," LoadStmtSyms
        lookahead ")" ","


}

State 304 {

    LoadStmtInner -> "load" "(" "STRING" ("," <LoadStmtSyms>)+ "," ")" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction LoadStmtInner -> "load" "(" "STRING" ("," <LoadStmtSyms>)+ "," ")"
        lookahead "\n" ";"


}

State 305 {

    LoadStmtSyms -> LoadStmtBindingName "STRING" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction LoadStmtSyms -> LoadStmtBindingName "STRING"
        lookahead ")" ","


}

State 306 {

    LoadStmtBindingName -> "IDENTIFIER" "=" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction LoadStmtBindingName -> "IDENTIFIER" "="
        lookahead "STRING"


}

State 307 {

    PrimaryExpr -> PrimaryExpr "[" Test ":" Test ":" Test . "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF

    "]" shift and goto 315

}

State 308 {

    PrimaryExpr -> PrimaryExpr "[" Test ":" Test ":" "]" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction PrimaryExpr -> PrimaryExpr "[" Test ":" Test ":" "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "*=" "+" "+=" "," "-" "-=" "." "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "[" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 309 {

    PrimaryExpr -> PrimaryExpr "[" Test ":" ":" Test "]" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction PrimaryExpr -> PrimaryExpr "[" Test ":" ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "*=" "+" "+=" "," "-" "-=" "." "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "[" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 310 {

    PrimaryExpr -> PrimaryExpr "[" ":" Test ":" Test "]" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction PrimaryExpr -> PrimaryExpr "[" ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "*=" "+" "+=" "," "-" "-=" "." "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "[" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 311 {

    ParameterTyped_ -> AssignIdent Type "=" Test .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction ParameterTyped_ -> AssignIdent Type "=" Test
        lookahead ")" ","


}

State 312 {

    ReturnType -> "->" Test .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction ReturnType -> "->" Test
        lookahead ":"


}

State 313 {

    Suite -> "\n"+ "INDENT" (<Stmt> "\n"*)+ "DEDENT" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Suite -> "\n"+ "INDENT" (<Stmt> "\n"*)+ "DEDENT"
        lookahead "\n" "(" "+" "-" "DEDENT" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "break" "continue" "def" "elif" "else" "for" "if" "lambda" "load" "not" "pass" "return" "{" "~" EOF


}

State 314 {

    ElseStmt -> "else" ":" Suite .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction ElseStmt -> "else" ":" Suite
        lookahead "\n" "(" "+" "-" "DEDENT" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "break" "continue" "def" "for" "if" "lambda" "load" "not" "pass" "return" "{" "~" EOF


}

State 315 {

    PrimaryExpr -> PrimaryExpr "[" Test ":" Test ":" Test "]" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction PrimaryExpr -> PrimaryExpr "[" Test ":" Test ":" Test "]"
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "*=" "+" "+=" "," "-" "-=" "." "/" "//" "//=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "[" "]" "^" "^=" "and" "else" "for" "if" "in" "not" "or" "|" "|=" "}"


}

State 316 {

    DefStmt_ -> "def" "IDENTIFIER" "(" COMMA<ParameterTyped> ")" ReturnType ":" Suite .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction DefStmt_ -> "def" "IDENTIFIER" "(" COMMA<ParameterTyped> ")" ReturnType ":" Suite
        lookahead "\n" "(" "+" "-" "DEDENT" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "break" "continue" "def" "for" "if" "lambda" "load" "not" "pass" "return" "{" "~" EOF


}

State 317 {

    Suite -> "\n"+ "INDENT" "\n"+ (<Stmt> "\n"*)+ "DEDENT" .
        lookahead "\n" "!=" "%" "%=" "&" "&=" "(" ")" "*" "**" "*=" "+" "+=" "," "-" "-=" "->" "." "/" "//" "//=" "/=" ":" ";" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "DEDENT" "FLOAT" "IDENTIFIER" "INDENT" "INTEGER" "STRING" "[" "]" "^" "^=" "and" "break" "continue" "def" "elif" "else" "for" "if" "in" "lambda" "load" "not" "or" "pass" "return" "{" "|" "|=" "}" "~" EOF


    reduction Suite -> "\n"+ "INDENT" "\n"+ (<Stmt> "\n"*)+ "DEDENT"
        lookahead "\n" "(" "+" "-" "DEDENT" "FLOAT" "IDENTIFIER" "INTEGER" "STRING" "[" "break" "continue" "def" "elif" "else" "for" "if" "lambda" "load" "not" "pass" "return" "{" "~" EOF


}
