load("@rules_rust//rust:defs.bzl", "rust_library")
load("@rules_rust//rust:defs.bzl", "rust_binary")

licenses(["notice"])  # Add a license to the target

rust_library(
    name = "starlark",
    srcs = glob(
        ["src/**/*.rs"],
        exclude = ["src/tests/**"],
    ),
    edition = "2021",
    proc_macro_deps = [
        "//starlark_derive",
        "@crate_index//:derivative",
        "@crate_index//:derive_more",
        "@crate_index//:paste",
    ],
    crate_features = ["hashbrown"],
    deps = [
        "//gazebo/gazebo",
        "//gazebo/dupe",
        "//allocative/allocative",
        "//starlark_map",
        "@crate_index//:annotate-snippets",
        "@crate_index//:anyhow",
        "@crate_index//:bumpalo",
        "@crate_index//:clap",
        "@crate_index//:debugserver-types",
        "@crate_index//:either",
        "@crate_index//:erased-serde",
        "@crate_index//:fancy-regex",
        "@crate_index//:hashbrown",
        "@crate_index//:inventory",
        "@crate_index//:itertools",
        "@crate_index//:lalrpop-util",
        "@crate_index//:logos",
        "@crate_index//:lsp-server",
        "@crate_index//:lsp-types",
        "@crate_index//:maplit",
        "@crate_index//:memchr",
        "@crate_index//:memoffset",
        "@crate_index//:num-bigint",
        "@crate_index//:num-traits",
        "@crate_index//:once_cell",
        "@crate_index//:regex",
        "@crate_index//:rustyline",
        "@crate_index//:serde",
        "@crate_index//:serde_json",
        "@crate_index//:static_assertions",
        "@crate_index//:strsim",
        "@crate_index//:textwrap",
        "@crate_index//:thiserror",
        "@crate_index//:walkdir",
    ],
)


# rust binary for build_grammar.rs
rust_binary(
    name = "build_grammar",
    srcs = ["build_grammar.rs"],
    edition = "2021",
    deps = [
        "@crate_index//:lalrpop",
    ],
)